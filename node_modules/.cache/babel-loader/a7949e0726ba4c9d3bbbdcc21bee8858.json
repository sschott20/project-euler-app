{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\src\\\\CardGroup.js\";\nimport React, { Component } from \"react\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport ProblemCard from \"./ProblemCard\";\n\nvar CardGroup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardGroup, _Component);\n\n  function CardGroup() {\n    _classCallCheck(this, CardGroup);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CardGroup).apply(this, arguments));\n  }\n\n  _createClass(CardGroup, [{\n    key: \"handleClick\",\n    value: function handleClick(title, problem, solution) {\n      this.props.onClick(title, problem, solution);\n    }\n  }, {\n    key: \"lychrelSolve\",\n    value: function lychrelSolve(target) {\n      var sum = 0;\n\n      for (var i = 0; i < target; i++) {\n        console.log(i);\n        sum += i;\n      }\n\n      return sum;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      this.lychrelProblem = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22\n        },\n        __self: this\n      }, \"If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 24\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 25\n        },\n        __self: this\n      }), \"Not all numbers produce palindromes so quickly. For example,\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }), \"\\u2003\\u2003349 + 943 = 1292,\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }), \"\\u2003\\u20031292 + 2921 = 4213\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }), \"\\u2003\\u20034213 + 3124 = 7337\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }), \"That is, 349 took three iterations to arrive at a palindrome.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 36\n        },\n        __self: this\n      }), \"Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50\n        },\n        __self: this\n      }), \"Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }), \"How many Lychrel numbers are there below ten-thousand?\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      })));\n      this.lychrelSolution = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, this.lychrelSolve(200));\n      return React.createElement(\"div\", {\n        id: \"card-columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, React.createElement(CardColumns, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      }, React.createElement(ProblemCard, {\n        title: \"Lychrel Numbers\",\n        text: \"How many times do you have to reverse add a number to itself before it becomes a palendrome?\",\n        onClick: function onClick(i, e, o) {\n          return _this.handleClick(i, e, o);\n        },\n        problem: this.lychrelProblem,\n        solution: this.lychrelSolution,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64\n        },\n        __self: this\n      }), React.createElement(ProblemCard, {\n        title: \"Discrete Primes\",\n        text: \"Some quick example text to build on the card title and make up the bulk of the card's content?\",\n        onClick: function onClick(i, e) {\n          return _this.handleClick(i, e);\n        },\n        problem: this.lychrelProblem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }), React.createElement(ProblemCard, {\n        title: \"Prime Factorization\",\n        text: \"What is the minimum number of tries it takes to factor a given number?\",\n        onClick: function onClick(i, e) {\n          return _this.handleClick(i, e);\n        },\n        problem: this.lychrelProblem,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return CardGroup;\n}(Component);\n\nexport default CardGroup;","map":{"version":3,"sources":["C:\\Users\\sebal\\Desktop\\Coding\\reactJS\\project-euler-app\\src\\CardGroup.js"],"names":["React","Component","CardColumns","ProblemCard","CardGroup","title","problem","solution","props","onClick","target","sum","i","console","log","lychrelProblem","lychrelSolution","lychrelSolve","e","o","handleClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport CardColumns from \"react-bootstrap/CardColumns\";\r\n\r\nimport ProblemCard from \"./ProblemCard\";\r\n\r\nclass CardGroup extends Component {\r\n  handleClick(title, problem, solution) {\r\n    this.props.onClick(title, problem, solution);\r\n  }\r\n  lychrelSolve(target) {\r\n    var sum = 0;\r\n    for (var i = 0; i < target; i++) {\r\n      console.log(i);\r\n      sum += i;\r\n    }\r\n    return sum;\r\n  }\r\n  render() {\r\n    this.lychrelProblem = (\r\n      <div>\r\n        <p>\r\n          If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\r\n          <br />\r\n          <br />\r\n          Not all numbers produce palindromes so quickly. For example,\r\n          <br />\r\n          &emsp;&emsp;349 + 943 = 1292,\r\n          <br />\r\n          &emsp;&emsp;1292 + 2921 = 4213\r\n          <br />\r\n          &emsp;&emsp;4213 + 3124 = 7337\r\n          <br />\r\n          That is, 349 took three iterations to arrive at a palindrome.\r\n          <br />\r\n          <br />\r\n          Although no one has proved it yet, it is thought that some numbers,\r\n          like 196, never produce a palindrome. A number that never forms a\r\n          palindrome through the reverse and add process is called a Lychrel\r\n          number. Due to the theoretical nature of these numbers, and for the\r\n          purpose of this problem, we shall assume that a number is Lychrel\r\n          until proven otherwise. In addition you are given that for every\r\n          number below ten-thousand, it will either (i) become a palindrome in\r\n          less than fifty iterations, or, (ii) no one, with all the computing\r\n          power that exists, has managed so far to map it to a palindrome. In\r\n          fact, 10677 is the first number to be shown to require over fifty\r\n          iterations before producing a palindrome: 4668731596684224866951378664\r\n          (53 iterations, 28-digits).\r\n          <br />\r\n          <br />\r\n          Surprisingly, there are palindromic numbers that are themselves\r\n          Lychrel numbers; the first example is 4994.\r\n          <br />\r\n          <br />\r\n          How many Lychrel numbers are there below ten-thousand?\r\n          <br />\r\n        </p>\r\n      </div>\r\n    );\r\n    this.lychrelSolution = <div>{this.lychrelSolve(200)}</div>;\r\n    return (\r\n      <div id=\"card-columns\">\r\n        <CardColumns>\r\n          <ProblemCard\r\n            title=\"Lychrel Numbers\"\r\n            text=\"How many times do you have to reverse add a number to itself before it becomes a palendrome?\"\r\n            onClick={(i, e, o) => this.handleClick(i, e, o)}\r\n            problem={this.lychrelProblem}\r\n            solution={this.lychrelSolution}\r\n          />\r\n          <ProblemCard\r\n            title=\"Discrete Primes\"\r\n            text=\"Some quick example text to build on the card title and make up the bulk of the card's content?\"\r\n            onClick={(i, e) => this.handleClick(i, e)}\r\n            problem={this.lychrelProblem}\r\n          />\r\n          <ProblemCard\r\n            title=\"Prime Factorization\"\r\n            text=\"What is the minimum number of tries it takes to factor a given number?\"\r\n            onClick={(i, e) => this.handleClick(i, e)}\r\n            problem={this.lychrelProblem}\r\n          />\r\n        </CardColumns>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardGroup;\r\n"]},"metadata":{},"sourceType":"module"}