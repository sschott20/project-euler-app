{"ast":null,"code":"/*!\n\nHolder - client side image placeholders\nVersion 2.8.2+c34r9\nÂ© 2015 Ivan Malopinsky - http://imsky.co\n\nSite:     http://holderjs.com\nIssues:   https://github.com/imsky/holder/issues\nLicense:  MIT\n\n*/\n(function (window) {\n  if (!window.document) return;\n  var document = window.document; //https://github.com/inexorabletash/polyfill/blob/master/web.js\n\n  if (!document.querySelectorAll) {\n    document.querySelectorAll = function (selectors) {\n      var style = document.createElement('style'),\n          elements = [],\n          element;\n      document.documentElement.firstChild.appendChild(style);\n      document._qsa = [];\n      style.styleSheet.cssText = selectors + '{x-qsa:expression(document._qsa && document._qsa.push(this))}';\n      window.scrollBy(0, 0);\n      style.parentNode.removeChild(style);\n\n      while (document._qsa.length) {\n        element = document._qsa.shift();\n        element.style.removeAttribute('x-qsa');\n        elements.push(element);\n      }\n\n      document._qsa = null;\n      return elements;\n    };\n  }\n\n  if (!document.querySelector) {\n    document.querySelector = function (selectors) {\n      var elements = document.querySelectorAll(selectors);\n      return elements.length ? elements[0] : null;\n    };\n  }\n\n  if (!document.getElementsByClassName) {\n    document.getElementsByClassName = function (classNames) {\n      classNames = String(classNames).replace(/^|\\s+/g, '.');\n      return document.querySelectorAll(classNames);\n    };\n  } //https://github.com/inexorabletash/polyfill\n  // ES5 15.2.3.14 Object.keys ( O )\n  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys\n\n\n  if (!Object.keys) {\n    Object.keys = function (o) {\n      if (o !== Object(o)) {\n        throw TypeError('Object.keys called on non-object');\n      }\n\n      var ret = [],\n          p;\n\n      for (p in o) {\n        if (Object.prototype.hasOwnProperty.call(o, p)) {\n          ret.push(p);\n        }\n      }\n\n      return ret;\n    };\n  } // ES5 15.4.4.18 Array.prototype.forEach ( callbackfn [ , thisArg ] )\n  // From https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/forEach\n\n\n  if (!Array.prototype.forEach) {\n    Array.prototype.forEach = function (fun\n    /*, thisp */\n    ) {\n      if (this === void 0 || this === null) {\n        throw TypeError();\n      }\n\n      var t = Object(this);\n      var len = t.length >>> 0;\n\n      if (typeof fun !== \"function\") {\n        throw TypeError();\n      }\n\n      var thisp = arguments[1],\n          i;\n\n      for (i = 0; i < len; i++) {\n        if (i in t) {\n          fun.call(thisp, t[i], i, t);\n        }\n      }\n    };\n  } //https://github.com/inexorabletash/polyfill/blob/master/web.js\n\n\n  (function (global) {\n    var B64_ALPHABET = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\n    global.atob = global.atob || function (input) {\n      input = String(input);\n      var position = 0,\n          output = [],\n          buffer = 0,\n          bits = 0,\n          n;\n      input = input.replace(/\\s/g, '');\n\n      if (input.length % 4 === 0) {\n        input = input.replace(/=+$/, '');\n      }\n\n      if (input.length % 4 === 1) {\n        throw Error('InvalidCharacterError');\n      }\n\n      if (/[^+/0-9A-Za-z]/.test(input)) {\n        throw Error('InvalidCharacterError');\n      }\n\n      while (position < input.length) {\n        n = B64_ALPHABET.indexOf(input.charAt(position));\n        buffer = buffer << 6 | n;\n        bits += 6;\n\n        if (bits === 24) {\n          output.push(String.fromCharCode(buffer >> 16 & 0xFF));\n          output.push(String.fromCharCode(buffer >> 8 & 0xFF));\n          output.push(String.fromCharCode(buffer & 0xFF));\n          bits = 0;\n          buffer = 0;\n        }\n\n        position += 1;\n      }\n\n      if (bits === 12) {\n        buffer = buffer >> 4;\n        output.push(String.fromCharCode(buffer & 0xFF));\n      } else if (bits === 18) {\n        buffer = buffer >> 2;\n        output.push(String.fromCharCode(buffer >> 8 & 0xFF));\n        output.push(String.fromCharCode(buffer & 0xFF));\n      }\n\n      return output.join('');\n    };\n\n    global.btoa = global.btoa || function (input) {\n      input = String(input);\n      var position = 0,\n          out = [],\n          o1,\n          o2,\n          o3,\n          e1,\n          e2,\n          e3,\n          e4;\n\n      if (/[^\\x00-\\xFF]/.test(input)) {\n        throw Error('InvalidCharacterError');\n      }\n\n      while (position < input.length) {\n        o1 = input.charCodeAt(position++);\n        o2 = input.charCodeAt(position++);\n        o3 = input.charCodeAt(position++); // 111111 112222 222233 333333\n\n        e1 = o1 >> 2;\n        e2 = (o1 & 0x3) << 4 | o2 >> 4;\n        e3 = (o2 & 0xf) << 2 | o3 >> 6;\n        e4 = o3 & 0x3f;\n\n        if (position === input.length + 2) {\n          e3 = 64;\n          e4 = 64;\n        } else if (position === input.length + 1) {\n          e4 = 64;\n        }\n\n        out.push(B64_ALPHABET.charAt(e1), B64_ALPHABET.charAt(e2), B64_ALPHABET.charAt(e3), B64_ALPHABET.charAt(e4));\n      }\n\n      return out.join('');\n    };\n  })(window); //https://gist.github.com/jimeh/332357\n\n\n  if (!Object.prototype.hasOwnProperty) {\n    /*jshint -W001, -W103 */\n    Object.prototype.hasOwnProperty = function (prop) {\n      var proto = this.__proto__ || this.constructor.prototype;\n      return prop in this && (!(prop in proto) || proto[prop] !== this[prop]);\n    };\n    /*jshint +W001, +W103 */\n\n  } // @license http://opensource.org/licenses/MIT\n  // copyright Paul Irish 2015\n  // Date.now() is supported everywhere except IE8. For IE8 we use the Date.now polyfill\n  //   github.com/Financial-Times/polyfill-service/blob/master/polyfills/Date.now/polyfill.js\n  // as Safari 6 doesn't have support for NavigationTiming, we use a Date.now() timestamp for relative values\n  // if you want values similar to what you'd get with real perf.now, place this towards the head of the page\n  // but in reality, you're just getting the delta between now() calls, so it's not terribly important where it's placed\n\n\n  (function () {\n    if ('performance' in window === false) {\n      window.performance = {};\n    }\n\n    Date.now = Date.now || function () {\n      // thanks IE8\n      return new Date().getTime();\n    };\n\n    if ('now' in window.performance === false) {\n      var nowOffset = Date.now();\n\n      if (performance.timing && performance.timing.navigationStart) {\n        nowOffset = performance.timing.navigationStart;\n      }\n\n      window.performance.now = function now() {\n        return Date.now() - nowOffset;\n      };\n    }\n  })(); //requestAnimationFrame polyfill for older Firefox/Chrome versions\n\n\n  if (!window.requestAnimationFrame) {\n    if (window.webkitRequestAnimationFrame) {\n      //https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/requestAnimationFrame/polyfill-webkit.js\n      (function (global) {\n        // window.requestAnimationFrame\n        global.requestAnimationFrame = function (callback) {\n          return webkitRequestAnimationFrame(function () {\n            callback(global.performance.now());\n          });\n        }; // window.cancelAnimationFrame\n\n\n        global.cancelAnimationFrame = webkitCancelAnimationFrame;\n      })(window);\n    } else if (window.mozRequestAnimationFrame) {\n      //https://github.com/Financial-Times/polyfill-service/blob/master/polyfills/requestAnimationFrame/polyfill-moz.js\n      (function (global) {\n        // window.requestAnimationFrame\n        global.requestAnimationFrame = function (callback) {\n          return mozRequestAnimationFrame(function () {\n            callback(global.performance.now());\n          });\n        }; // window.cancelAnimationFrame\n\n\n        global.cancelAnimationFrame = mozCancelAnimationFrame;\n      })(window);\n    } else {\n      (function (global) {\n        global.requestAnimationFrame = function (callback) {\n          return global.setTimeout(callback, 1000 / 60);\n        };\n\n        global.cancelAnimationFrame = global.clearTimeout;\n      })(window);\n    }\n  }\n})(this);\n\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory();else if (typeof define === 'function' && define.amd) define(factory);else if (typeof exports === 'object') exports[\"Holder\"] = factory();else root[\"Holder\"] = factory();\n})(this, function () {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId])\n          /******/\n          return installedModules[moduleId].exports;\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n        var module = installedModules[moduleId] = {\n          /******/\n          exports: {},\n\n          /******/\n          id: moduleId,\n\n          /******/\n          loaded: false\n          /******/\n\n        };\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.loaded = true;\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n      __webpack_require__.p = \"\";\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(0);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    [\n    /* 0 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /*\n      Holder.js - client side image placeholders\n      (c) 2012-2015 Ivan Malopinsky - http://imsky.co\n      */\n      module.exports = __webpack_require__(1);\n      /***/\n    },\n    /* 1 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /* WEBPACK VAR INJECTION */\n      (function (global) {\n        /*\n        Holder.js - client side image placeholders\n        (c) 2012-2015 Ivan Malopinsky - http://imsky.co\n        */\n        //Libraries and functions\n        var onDomReady = __webpack_require__(2);\n\n        var querystring = __webpack_require__(3);\n\n        var SceneGraph = __webpack_require__(4);\n\n        var utils = __webpack_require__(5);\n\n        var SVG = __webpack_require__(6);\n\n        var DOM = __webpack_require__(7);\n\n        var Color = __webpack_require__(8);\n\n        var constants = __webpack_require__(9);\n\n        var svgRenderer = __webpack_require__(10);\n\n        var extend = utils.extend;\n        var dimensionCheck = utils.dimensionCheck; //Constants and definitions\n\n        var SVG_NS = constants.svg_ns;\n        var Holder = {\n          version: constants.version,\n\n          /**\n           * Adds a theme to default settings\n           *\n           * @param {string} name Theme name\n           * @param {Object} theme Theme object, with foreground, background, size, font, and fontweight properties.\n           */\n          addTheme: function addTheme(name, theme) {\n            name != null && theme != null && (App.settings.themes[name] = theme);\n            delete App.vars.cache.themeKeys;\n            return this;\n          },\n\n          /**\n           * Appends a placeholder to an element\n           *\n           * @param {string} src Placeholder URL string\n           * @param el A selector or a reference to a DOM node\n           */\n          addImage: function addImage(src, el) {\n            //todo: use jquery fallback if available for all QSA references\n            var nodes = DOM.getNodeArray(el);\n            nodes.forEach(function (node) {\n              var img = DOM.newEl('img');\n              var domProps = {};\n              domProps[App.setup.dataAttr] = src;\n              DOM.setAttr(img, domProps);\n              node.appendChild(img);\n            });\n            return this;\n          },\n\n          /**\n           * Sets whether or not an image is updated on resize.\n           * If an image is set to be updated, it is immediately rendered.\n           *\n           * @param {Object} el Image DOM element\n           * @param {Boolean} value Resizable update flag value\n           */\n          setResizeUpdate: function setResizeUpdate(el, value) {\n            if (el.holderData) {\n              el.holderData.resizeUpdate = !!value;\n\n              if (el.holderData.resizeUpdate) {\n                updateResizableElements(el);\n              }\n            }\n          },\n\n          /**\n           * Runs Holder with options. By default runs Holder on all images with \"holder.js\" in their source attributes.\n           *\n           * @param {Object} userOptions Options object, can contain domain, themes, images, and bgnodes properties\n           */\n          run: function run(userOptions) {\n            //todo: split processing into separate queues\n            userOptions = userOptions || {};\n            var engineSettings = {};\n            var options = extend(App.settings, userOptions);\n            App.vars.preempted = true;\n            App.vars.dataAttr = options.dataAttr || App.setup.dataAttr;\n            App.vars.lineWrapRatio = options.lineWrapRatio || App.setup.lineWrapRatio;\n            engineSettings.renderer = options.renderer ? options.renderer : App.setup.renderer;\n\n            if (App.setup.renderers.join(',').indexOf(engineSettings.renderer) === -1) {\n              engineSettings.renderer = App.setup.supportsSVG ? 'svg' : App.setup.supportsCanvas ? 'canvas' : 'html';\n            }\n\n            var images = DOM.getNodeArray(options.images);\n            var bgnodes = DOM.getNodeArray(options.bgnodes);\n            var stylenodes = DOM.getNodeArray(options.stylenodes);\n            var objects = DOM.getNodeArray(options.objects);\n            engineSettings.stylesheets = [];\n            engineSettings.svgXMLStylesheet = true;\n            engineSettings.noFontFallback = options.noFontFallback ? options.noFontFallback : false;\n            stylenodes.forEach(function (styleNode) {\n              if (styleNode.attributes.rel && styleNode.attributes.href && styleNode.attributes.rel.value == 'stylesheet') {\n                var href = styleNode.attributes.href.value; //todo: write isomorphic relative-to-absolute URL function\n\n                var proxyLink = DOM.newEl('a');\n                proxyLink.href = href;\n                var stylesheetURL = proxyLink.protocol + '//' + proxyLink.host + proxyLink.pathname + proxyLink.search;\n                engineSettings.stylesheets.push(stylesheetURL);\n              }\n            });\n            bgnodes.forEach(function (bgNode) {\n              //Skip processing background nodes if getComputedStyle is unavailable, since only modern browsers would be able to use canvas or SVG to render to background\n              if (!global.getComputedStyle) return;\n              var backgroundImage = global.getComputedStyle(bgNode, null).getPropertyValue('background-image');\n              var dataBackgroundImage = bgNode.getAttribute('data-background-src');\n              var rawURL = dataBackgroundImage || backgroundImage;\n              var holderURL = null;\n              var holderString = options.domain + '/';\n              var holderStringIndex = rawURL.indexOf(holderString);\n\n              if (holderStringIndex === 0) {\n                holderURL = rawURL;\n              } else if (holderStringIndex === 1 && rawURL[0] === '?') {\n                holderURL = rawURL.slice(1);\n              } else {\n                var fragment = rawURL.substr(holderStringIndex).match(/([^\\\"]*)\"?\\)/);\n\n                if (fragment !== null) {\n                  holderURL = fragment[1];\n                } else if (rawURL.indexOf('url(') === 0) {\n                  throw 'Holder: unable to parse background URL: ' + rawURL;\n                }\n              }\n\n              if (holderURL != null) {\n                var holderFlags = parseURL(holderURL, options);\n\n                if (holderFlags) {\n                  prepareDOMElement({\n                    mode: 'background',\n                    el: bgNode,\n                    flags: holderFlags,\n                    engineSettings: engineSettings\n                  });\n                }\n              }\n            });\n            objects.forEach(function (object) {\n              var objectAttr = {};\n\n              try {\n                objectAttr.data = object.getAttribute('data');\n                objectAttr.dataSrc = object.getAttribute(App.vars.dataAttr);\n              } catch (e) {}\n\n              var objectHasSrcURL = objectAttr.data != null && objectAttr.data.indexOf(options.domain) === 0;\n              var objectHasDataSrcURL = objectAttr.dataSrc != null && objectAttr.dataSrc.indexOf(options.domain) === 0;\n\n              if (objectHasSrcURL) {\n                prepareImageElement(options, engineSettings, objectAttr.data, object);\n              } else if (objectHasDataSrcURL) {\n                prepareImageElement(options, engineSettings, objectAttr.dataSrc, object);\n              }\n            });\n            images.forEach(function (image) {\n              var imageAttr = {};\n\n              try {\n                imageAttr.src = image.getAttribute('src');\n                imageAttr.dataSrc = image.getAttribute(App.vars.dataAttr);\n                imageAttr.rendered = image.getAttribute('data-holder-rendered');\n              } catch (e) {}\n\n              var imageHasSrc = imageAttr.src != null;\n              var imageHasDataSrcURL = imageAttr.dataSrc != null && imageAttr.dataSrc.indexOf(options.domain) === 0;\n              var imageRendered = imageAttr.rendered != null && imageAttr.rendered == 'true';\n\n              if (imageHasSrc) {\n                if (imageAttr.src.indexOf(options.domain) === 0) {\n                  prepareImageElement(options, engineSettings, imageAttr.src, image);\n                } else if (imageHasDataSrcURL) {\n                  //Image has a valid data-src and an invalid src\n                  if (imageRendered) {\n                    //If the placeholder has already been render, re-render it\n                    prepareImageElement(options, engineSettings, imageAttr.dataSrc, image);\n                  } else {\n                    //If the placeholder has not been rendered, check if the image exists and render a fallback if it doesn't\n                    (function (src, options, engineSettings, dataSrc, image) {\n                      utils.imageExists(src, function (exists) {\n                        if (!exists) {\n                          prepareImageElement(options, engineSettings, dataSrc, image);\n                        }\n                      });\n                    })(imageAttr.src, options, engineSettings, imageAttr.dataSrc, image);\n                  }\n                }\n              } else if (imageHasDataSrcURL) {\n                prepareImageElement(options, engineSettings, imageAttr.dataSrc, image);\n              }\n            });\n            return this;\n          }\n        };\n        var App = {\n          settings: {\n            domain: 'holder.js',\n            images: 'img',\n            objects: 'object',\n            bgnodes: 'body .holderjs',\n            stylenodes: 'head link.holderjs',\n            themes: {\n              'gray': {\n                background: '#EEEEEE',\n                foreground: '#AAAAAA'\n              },\n              'social': {\n                background: '#3a5a97',\n                foreground: '#FFFFFF'\n              },\n              'industrial': {\n                background: '#434A52',\n                foreground: '#C2F200'\n              },\n              'sky': {\n                background: '#0D8FDB',\n                foreground: '#FFFFFF'\n              },\n              'vine': {\n                background: '#39DBAC',\n                foreground: '#1E292C'\n              },\n              'lava': {\n                background: '#F8591A',\n                foreground: '#1C2846'\n              }\n            }\n          },\n          defaults: {\n            size: 10,\n            units: 'pt',\n            scale: 1 / 16\n          }\n        };\n        /**\n         * Processes provided source attribute and sets up the appropriate rendering workflow\n         *\n         * @private\n         * @param options Instance options from Holder.run\n         * @param renderSettings Instance configuration\n         * @param src Image URL\n         * @param el Image DOM element\n         */\n\n        function prepareImageElement(options, engineSettings, src, el) {\n          var holderFlags = parseURL(src.substr(src.lastIndexOf(options.domain)), options);\n\n          if (holderFlags) {\n            prepareDOMElement({\n              mode: null,\n              el: el,\n              flags: holderFlags,\n              engineSettings: engineSettings\n            });\n          }\n        }\n        /**\n         * Processes a Holder URL and extracts configuration from query string\n         *\n         * @private\n         * @param url URL\n         * @param instanceOptions Instance options from Holder.run\n         */\n\n\n        function parseURL(url, instanceOptions) {\n          var holder = {\n            theme: extend(App.settings.themes.gray, null),\n            stylesheets: instanceOptions.stylesheets,\n            instanceOptions: instanceOptions\n          };\n          var parts = url.split('?');\n          var basics = parts[0].split('/');\n          holder.holderURL = url;\n          var dimensions = basics[1];\n          var dimensionData = dimensions.match(/([\\d]+p?)x([\\d]+p?)/);\n          if (!dimensionData) return false;\n          holder.fluid = dimensions.indexOf('p') !== -1;\n          holder.dimensions = {\n            width: dimensionData[1].replace('p', '%'),\n            height: dimensionData[2].replace('p', '%')\n          };\n\n          if (parts.length === 2) {\n            var options = querystring.parse(parts[1]); // Colors\n\n            if (options.bg) {\n              holder.theme.background = utils.parseColor(options.bg);\n            }\n\n            if (options.fg) {\n              holder.theme.foreground = utils.parseColor(options.fg);\n            } //todo: add automatic foreground to themes without foreground\n\n\n            if (options.bg && !options.fg) {\n              holder.autoFg = true;\n            }\n\n            if (options.theme && holder.instanceOptions.themes.hasOwnProperty(options.theme)) {\n              holder.theme = extend(holder.instanceOptions.themes[options.theme], null);\n            } // Text\n\n\n            if (options.text) {\n              holder.text = options.text;\n            }\n\n            if (options.textmode) {\n              holder.textmode = options.textmode;\n            }\n\n            if (options.size) {\n              holder.size = options.size;\n            }\n\n            if (options.font) {\n              holder.font = options.font;\n            }\n\n            if (options.align) {\n              holder.align = options.align;\n            }\n\n            holder.nowrap = utils.truthy(options.nowrap); // Miscellaneous\n\n            holder.auto = utils.truthy(options.auto);\n            holder.outline = utils.truthy(options.outline);\n\n            if (utils.truthy(options.random)) {\n              App.vars.cache.themeKeys = App.vars.cache.themeKeys || Object.keys(holder.instanceOptions.themes);\n              var _theme = App.vars.cache.themeKeys[0 | Math.random() * App.vars.cache.themeKeys.length];\n              holder.theme = extend(holder.instanceOptions.themes[_theme], null);\n            }\n          }\n\n          return holder;\n        }\n        /**\n         * Modifies the DOM to fit placeholders and sets up resizable image callbacks (for fluid and automatically sized placeholders)\n         *\n         * @private\n         * @param settings DOM prep settings\n         */\n\n\n        function prepareDOMElement(prepSettings) {\n          var mode = prepSettings.mode;\n          var el = prepSettings.el;\n          var flags = prepSettings.flags;\n          var _engineSettings = prepSettings.engineSettings;\n          var dimensions = flags.dimensions,\n              theme = flags.theme;\n          var dimensionsCaption = dimensions.width + 'x' + dimensions.height;\n          mode = mode == null ? flags.fluid ? 'fluid' : 'image' : mode;\n\n          if (flags.text != null) {\n            theme.text = flags.text; //<object> SVG embedding doesn't parse Unicode properly\n\n            if (el.nodeName.toLowerCase() === 'object') {\n              var textLines = theme.text.split('\\\\n');\n\n              for (var k = 0; k < textLines.length; k++) {\n                textLines[k] = utils.encodeHtmlEntity(textLines[k]);\n              }\n\n              theme.text = textLines.join('\\\\n');\n            }\n          }\n\n          var holderURL = flags.holderURL;\n          var engineSettings = extend(_engineSettings, null);\n\n          if (flags.font) {\n            /*\n            If external fonts are used in a <img> placeholder rendered with SVG, Holder falls back to canvas.\n             This is done because Firefox and Chrome disallow embedded SVGs from referencing external assets.\n            The workaround is either to change the placeholder tag from <img> to <object> or to use the canvas renderer.\n            */\n            theme.font = flags.font;\n\n            if (!engineSettings.noFontFallback && el.nodeName.toLowerCase() === 'img' && App.setup.supportsCanvas && engineSettings.renderer === 'svg') {\n              engineSettings = extend(engineSettings, {\n                renderer: 'canvas'\n              });\n            }\n          } //Chrome and Opera require a quick 10ms re-render if web fonts are used with canvas\n\n\n          if (flags.font && engineSettings.renderer == 'canvas') {\n            engineSettings.reRender = true;\n          }\n\n          if (mode == 'background') {\n            if (el.getAttribute('data-background-src') == null) {\n              DOM.setAttr(el, {\n                'data-background-src': holderURL\n              });\n            }\n          } else {\n            var domProps = {};\n            domProps[App.vars.dataAttr] = holderURL;\n            DOM.setAttr(el, domProps);\n          }\n\n          flags.theme = theme; //todo consider using all renderSettings in holderData\n\n          el.holderData = {\n            flags: flags,\n            engineSettings: engineSettings\n          };\n\n          if (mode == 'image' || mode == 'fluid') {\n            DOM.setAttr(el, {\n              'alt': theme.text ? theme.text + ' [' + dimensionsCaption + ']' : dimensionsCaption\n            });\n          }\n\n          var renderSettings = {\n            mode: mode,\n            el: el,\n            holderSettings: {\n              dimensions: dimensions,\n              theme: theme,\n              flags: flags\n            },\n            engineSettings: engineSettings\n          };\n\n          if (mode == 'image') {\n            if (!flags.auto) {\n              el.style.width = dimensions.width + 'px';\n              el.style.height = dimensions.height + 'px';\n            }\n\n            if (engineSettings.renderer == 'html') {\n              el.style.backgroundColor = theme.background;\n            } else {\n              render(renderSettings);\n\n              if (flags.textmode == 'exact') {\n                el.holderData.resizeUpdate = true;\n                App.vars.resizableImages.push(el);\n                updateResizableElements(el);\n              }\n            }\n          } else if (mode == 'background' && engineSettings.renderer != 'html') {\n            render(renderSettings);\n          } else if (mode == 'fluid') {\n            el.holderData.resizeUpdate = true;\n\n            if (dimensions.height.slice(-1) == '%') {\n              el.style.height = dimensions.height;\n            } else if (flags.auto == null || !flags.auto) {\n              el.style.height = dimensions.height + 'px';\n            }\n\n            if (dimensions.width.slice(-1) == '%') {\n              el.style.width = dimensions.width;\n            } else if (flags.auto == null || !flags.auto) {\n              el.style.width = dimensions.width + 'px';\n            }\n\n            if (el.style.display == 'inline' || el.style.display === '' || el.style.display == 'none') {\n              el.style.display = 'block';\n            }\n\n            setInitialDimensions(el);\n\n            if (engineSettings.renderer == 'html') {\n              el.style.backgroundColor = theme.background;\n            } else {\n              App.vars.resizableImages.push(el);\n              updateResizableElements(el);\n            }\n          }\n        }\n        /**\n         * Core function that takes output from renderers and sets it as the source or background-image of the target element\n         *\n         * @private\n         * @param renderSettings Renderer settings\n         */\n\n\n        function render(renderSettings) {\n          var image = null;\n          var mode = renderSettings.mode;\n          var el = renderSettings.el;\n          var holderSettings = renderSettings.holderSettings;\n          var engineSettings = renderSettings.engineSettings;\n\n          switch (engineSettings.renderer) {\n            case 'svg':\n              if (!App.setup.supportsSVG) return;\n              break;\n\n            case 'canvas':\n              if (!App.setup.supportsCanvas) return;\n              break;\n\n            default:\n              return;\n          } //todo: move generation of scene up to flag generation to reduce extra object creation\n\n\n          var scene = {\n            width: holderSettings.dimensions.width,\n            height: holderSettings.dimensions.height,\n            theme: holderSettings.theme,\n            flags: holderSettings.flags\n          };\n          var sceneGraph = buildSceneGraph(scene);\n\n          function getRenderedImage() {\n            var image = null;\n\n            switch (engineSettings.renderer) {\n              case 'canvas':\n                image = sgCanvasRenderer(sceneGraph, renderSettings);\n                break;\n\n              case 'svg':\n                image = svgRenderer(sceneGraph, renderSettings);\n                break;\n\n              default:\n                throw 'Holder: invalid renderer: ' + engineSettings.renderer;\n            }\n\n            return image;\n          }\n\n          image = getRenderedImage();\n\n          if (image == null) {\n            throw 'Holder: couldn\\'t render placeholder';\n          } //todo: add <object> canvas rendering\n\n\n          if (mode == 'background') {\n            el.style.backgroundImage = 'url(' + image + ')';\n            el.style.backgroundSize = scene.width + 'px ' + scene.height + 'px';\n          } else {\n            if (el.nodeName.toLowerCase() === 'img') {\n              DOM.setAttr(el, {\n                'src': image\n              });\n            } else if (el.nodeName.toLowerCase() === 'object') {\n              DOM.setAttr(el, {\n                'data': image\n              });\n              DOM.setAttr(el, {\n                'type': 'image/svg+xml'\n              });\n            }\n\n            if (engineSettings.reRender) {\n              global.setTimeout(function () {\n                var image = getRenderedImage();\n\n                if (image == null) {\n                  throw 'Holder: couldn\\'t render placeholder';\n                } //todo: refactor this code into a function\n\n\n                if (el.nodeName.toLowerCase() === 'img') {\n                  DOM.setAttr(el, {\n                    'src': image\n                  });\n                } else if (el.nodeName.toLowerCase() === 'object') {\n                  DOM.setAttr(el, {\n                    'data': image\n                  });\n                  DOM.setAttr(el, {\n                    'type': 'image/svg+xml'\n                  });\n                }\n              }, 150);\n            }\n          } //todo: account for re-rendering\n\n\n          DOM.setAttr(el, {\n            'data-holder-rendered': true\n          });\n        }\n        /**\n         * Core function that takes a Holder scene description and builds a scene graph\n         *\n         * @private\n         * @param scene Holder scene object\n         */\n        //todo: make this function reusable\n        //todo: merge app defaults and setup properties into the scene argument\n\n\n        function buildSceneGraph(scene) {\n          var fontSize = App.defaults.size;\n\n          if (parseFloat(scene.theme.size)) {\n            fontSize = scene.theme.size;\n          } else if (parseFloat(scene.flags.size)) {\n            fontSize = scene.flags.size;\n          }\n\n          scene.font = {\n            family: scene.theme.font ? scene.theme.font : 'Arial, Helvetica, Open Sans, sans-serif',\n            size: textSize(scene.width, scene.height, fontSize, App.defaults.scale),\n            units: scene.theme.units ? scene.theme.units : App.defaults.units,\n            weight: scene.theme.fontweight ? scene.theme.fontweight : 'bold'\n          };\n          scene.text = scene.theme.text || Math.floor(scene.width) + 'x' + Math.floor(scene.height);\n          scene.noWrap = scene.theme.nowrap || scene.flags.nowrap;\n          scene.align = scene.theme.align || scene.flags.align || 'center';\n\n          switch (scene.flags.textmode) {\n            case 'literal':\n              scene.text = scene.flags.dimensions.width + 'x' + scene.flags.dimensions.height;\n              break;\n\n            case 'exact':\n              if (!scene.flags.exactDimensions) break;\n              scene.text = Math.floor(scene.flags.exactDimensions.width) + 'x' + Math.floor(scene.flags.exactDimensions.height);\n              break;\n          }\n\n          var sceneGraph = new SceneGraph({\n            width: scene.width,\n            height: scene.height\n          });\n          var Shape = sceneGraph.Shape;\n          var holderBg = new Shape.Rect('holderBg', {\n            fill: scene.theme.background\n          });\n          holderBg.resize(scene.width, scene.height);\n          sceneGraph.root.add(holderBg);\n\n          if (scene.flags.outline) {\n            var outlineColor = new Color(holderBg.properties.fill);\n            outlineColor = outlineColor.lighten(outlineColor.lighterThan('7f7f7f') ? -0.1 : 0.1);\n            holderBg.properties.outline = {\n              fill: outlineColor.toHex(true),\n              width: 2\n            };\n          }\n\n          var holderTextColor = scene.theme.foreground;\n\n          if (scene.flags.autoFg) {\n            var holderBgColor = new Color(holderBg.properties.fill);\n            var lightColor = new Color('fff');\n            var darkColor = new Color('000', {\n              'alpha': 0.285714\n            });\n            holderTextColor = holderBgColor.blendAlpha(holderBgColor.lighterThan('7f7f7f') ? darkColor : lightColor).toHex(true);\n          }\n\n          var holderTextGroup = new Shape.Group('holderTextGroup', {\n            text: scene.text,\n            align: scene.align,\n            font: scene.font,\n            fill: holderTextColor\n          });\n          holderTextGroup.moveTo(null, null, 1);\n          sceneGraph.root.add(holderTextGroup);\n          var tpdata = holderTextGroup.textPositionData = stagingRenderer(sceneGraph);\n\n          if (!tpdata) {\n            throw 'Holder: staging fallback not supported yet.';\n          }\n\n          holderTextGroup.properties.leading = tpdata.boundingBox.height;\n          var textNode = null;\n          var line = null;\n\n          function finalizeLine(parent, line, width, height) {\n            line.width = width;\n            line.height = height;\n            parent.width = Math.max(parent.width, line.width);\n            parent.height += line.height;\n          }\n\n          var sceneMargin = scene.width * App.vars.lineWrapRatio;\n          var maxLineWidth = sceneMargin;\n\n          if (tpdata.lineCount > 1) {\n            var offsetX = 0;\n            var offsetY = 0;\n            var lineIndex = 0;\n            var lineKey;\n            line = new Shape.Group('line' + lineIndex); //Double margin so that left/right-aligned next is not flush with edge of image\n\n            if (scene.align === 'left' || scene.align === 'right') {\n              maxLineWidth = scene.width * (1 - (1 - App.vars.lineWrapRatio) * 2);\n            }\n\n            for (var i = 0; i < tpdata.words.length; i++) {\n              var word = tpdata.words[i];\n              textNode = new Shape.Text(word.text);\n              var newline = word.text == '\\\\n';\n\n              if (!scene.noWrap && (offsetX + word.width >= maxLineWidth || newline === true)) {\n                finalizeLine(holderTextGroup, line, offsetX, holderTextGroup.properties.leading);\n                holderTextGroup.add(line);\n                offsetX = 0;\n                offsetY += holderTextGroup.properties.leading;\n                lineIndex += 1;\n                line = new Shape.Group('line' + lineIndex);\n                line.y = offsetY;\n              }\n\n              if (newline === true) {\n                continue;\n              }\n\n              textNode.moveTo(offsetX, 0);\n              offsetX += tpdata.spaceWidth + word.width;\n              line.add(textNode);\n            }\n\n            finalizeLine(holderTextGroup, line, offsetX, holderTextGroup.properties.leading);\n            holderTextGroup.add(line);\n\n            if (scene.align === 'left') {\n              holderTextGroup.moveTo(scene.width - sceneMargin, null, null);\n            } else if (scene.align === 'right') {\n              for (lineKey in holderTextGroup.children) {\n                line = holderTextGroup.children[lineKey];\n                line.moveTo(scene.width - line.width, null, null);\n              }\n\n              holderTextGroup.moveTo(0 - (scene.width - sceneMargin), null, null);\n            } else {\n              for (lineKey in holderTextGroup.children) {\n                line = holderTextGroup.children[lineKey];\n                line.moveTo((holderTextGroup.width - line.width) / 2, null, null);\n              }\n\n              holderTextGroup.moveTo((scene.width - holderTextGroup.width) / 2, null, null);\n            }\n\n            holderTextGroup.moveTo(null, (scene.height - holderTextGroup.height) / 2, null); //If the text exceeds vertical space, move it down so the first line is visible\n\n            if ((scene.height - holderTextGroup.height) / 2 < 0) {\n              holderTextGroup.moveTo(null, 0, null);\n            }\n          } else {\n            textNode = new Shape.Text(scene.text);\n            line = new Shape.Group('line0');\n            line.add(textNode);\n            holderTextGroup.add(line);\n\n            if (scene.align === 'left') {\n              holderTextGroup.moveTo(scene.width - sceneMargin, null, null);\n            } else if (scene.align === 'right') {\n              holderTextGroup.moveTo(0 - (scene.width - sceneMargin), null, null);\n            } else {\n              holderTextGroup.moveTo((scene.width - tpdata.boundingBox.width) / 2, null, null);\n            }\n\n            holderTextGroup.moveTo(null, (scene.height - tpdata.boundingBox.height) / 2, null);\n          } //todo: renderlist\n\n\n          return sceneGraph;\n        }\n        /**\n         * Adaptive text sizing function\n         *\n         * @private\n         * @param width Parent width\n         * @param height Parent height\n         * @param fontSize Requested text size\n         * @param scale Proportional scale of text\n         */\n\n\n        function textSize(width, height, fontSize, scale) {\n          var stageWidth = parseInt(width, 10);\n          var stageHeight = parseInt(height, 10);\n          var bigSide = Math.max(stageWidth, stageHeight);\n          var smallSide = Math.min(stageWidth, stageHeight);\n          var newHeight = 0.8 * Math.min(smallSide, bigSide * scale);\n          return Math.round(Math.max(fontSize, newHeight));\n        }\n        /**\n         * Iterates over resizable (fluid or auto) placeholders and renders them\n         *\n         * @private\n         * @param element Optional element selector, specified only if a specific element needs to be re-rendered\n         */\n\n\n        function updateResizableElements(element) {\n          var images;\n\n          if (element == null || element.nodeType == null) {\n            images = App.vars.resizableImages;\n          } else {\n            images = [element];\n          }\n\n          for (var i = 0, l = images.length; i < l; i++) {\n            var el = images[i];\n\n            if (el.holderData) {\n              var flags = el.holderData.flags;\n              var dimensions = dimensionCheck(el);\n\n              if (dimensions) {\n                if (!el.holderData.resizeUpdate) {\n                  continue;\n                }\n\n                if (flags.fluid && flags.auto) {\n                  var fluidConfig = el.holderData.fluidConfig;\n\n                  switch (fluidConfig.mode) {\n                    case 'width':\n                      dimensions.height = dimensions.width / fluidConfig.ratio;\n                      break;\n\n                    case 'height':\n                      dimensions.width = dimensions.height * fluidConfig.ratio;\n                      break;\n                  }\n                }\n\n                var settings = {\n                  mode: 'image',\n                  holderSettings: {\n                    dimensions: dimensions,\n                    theme: flags.theme,\n                    flags: flags\n                  },\n                  el: el,\n                  engineSettings: el.holderData.engineSettings\n                };\n\n                if (flags.textmode == 'exact') {\n                  flags.exactDimensions = dimensions;\n                  settings.holderSettings.dimensions = flags.dimensions;\n                }\n\n                render(settings);\n              } else {\n                setInvisible(el);\n              }\n            }\n          }\n        }\n        /**\n         * Sets up aspect ratio metadata for fluid placeholders, in order to preserve proportions when resizing\n         *\n         * @private\n         * @param el Image DOM element\n         */\n\n\n        function setInitialDimensions(el) {\n          if (el.holderData) {\n            var dimensions = dimensionCheck(el);\n\n            if (dimensions) {\n              var flags = el.holderData.flags;\n              var fluidConfig = {\n                fluidHeight: flags.dimensions.height.slice(-1) == '%',\n                fluidWidth: flags.dimensions.width.slice(-1) == '%',\n                mode: null,\n                initialDimensions: dimensions\n              };\n\n              if (fluidConfig.fluidWidth && !fluidConfig.fluidHeight) {\n                fluidConfig.mode = 'width';\n                fluidConfig.ratio = fluidConfig.initialDimensions.width / parseFloat(flags.dimensions.height);\n              } else if (!fluidConfig.fluidWidth && fluidConfig.fluidHeight) {\n                fluidConfig.mode = 'height';\n                fluidConfig.ratio = parseFloat(flags.dimensions.width) / fluidConfig.initialDimensions.height;\n              }\n\n              el.holderData.fluidConfig = fluidConfig;\n            } else {\n              setInvisible(el);\n            }\n          }\n        }\n        /**\n         * Iterates through all current invisible images, and if they're visible, renders them and removes them from further checks. Runs every animation frame.\n         *\n         * @private\n         */\n\n\n        function visibilityCheck() {\n          var renderableImages = [];\n          var keys = Object.keys(App.vars.invisibleImages);\n          var el;\n          keys.forEach(function (key) {\n            el = App.vars.invisibleImages[key];\n\n            if (dimensionCheck(el) && el.nodeName.toLowerCase() == 'img') {\n              renderableImages.push(el);\n              delete App.vars.invisibleImages[key];\n            }\n          });\n\n          if (renderableImages.length) {\n            Holder.run({\n              images: renderableImages\n            });\n          } // Done to prevent 100% CPU usage via aggressive calling of requestAnimationFrame\n\n\n          setTimeout(function () {\n            global.requestAnimationFrame(visibilityCheck);\n          }, 10);\n        }\n        /**\n         * Starts checking for invisible placeholders if not doing so yet. Does nothing otherwise.\n         *\n         * @private\n         */\n\n\n        function startVisibilityCheck() {\n          if (!App.vars.visibilityCheckStarted) {\n            global.requestAnimationFrame(visibilityCheck);\n            App.vars.visibilityCheckStarted = true;\n          }\n        }\n        /**\n         * Sets a unique ID for an image detected to be invisible and adds it to the map of invisible images checked by visibilityCheck\n         *\n         * @private\n         * @param el Invisible DOM element\n         */\n\n\n        function setInvisible(el) {\n          if (!el.holderData.invisibleId) {\n            App.vars.invisibleId += 1;\n            App.vars.invisibleImages['i' + App.vars.invisibleId] = el;\n            el.holderData.invisibleId = App.vars.invisibleId;\n          }\n        } //todo: see if possible to convert stagingRenderer to use HTML only\n\n\n        var stagingRenderer = function () {\n          var svg = null,\n              stagingText = null,\n              stagingTextNode = null;\n          return function (graph) {\n            var rootNode = graph.root;\n\n            if (App.setup.supportsSVG) {\n              var firstTimeSetup = false;\n\n              var tnode = function tnode(text) {\n                return document.createTextNode(text);\n              };\n\n              if (svg == null || svg.parentNode !== document.body) {\n                firstTimeSetup = true;\n              }\n\n              svg = SVG.initSVG(svg, rootNode.properties.width, rootNode.properties.height); //Show staging element before staging\n\n              svg.style.display = 'block';\n\n              if (firstTimeSetup) {\n                stagingText = DOM.newEl('text', SVG_NS);\n                stagingTextNode = tnode(null);\n                DOM.setAttr(stagingText, {\n                  x: 0\n                });\n                stagingText.appendChild(stagingTextNode);\n                svg.appendChild(stagingText);\n                document.body.appendChild(svg);\n                svg.style.visibility = 'hidden';\n                svg.style.position = 'absolute';\n                svg.style.top = '-100%';\n                svg.style.left = '-100%'; //todo: workaround for zero-dimension <svg> tag in Opera 12\n                //svg.setAttribute('width', 0);\n                //svg.setAttribute('height', 0);\n              }\n\n              var holderTextGroup = rootNode.children.holderTextGroup;\n              var htgProps = holderTextGroup.properties;\n              DOM.setAttr(stagingText, {\n                'y': htgProps.font.size,\n                'style': utils.cssProps({\n                  'font-weight': htgProps.font.weight,\n                  'font-size': htgProps.font.size + htgProps.font.units,\n                  'font-family': htgProps.font.family\n                })\n              }); //Get bounding box for the whole string (total width and height)\n\n              stagingTextNode.nodeValue = htgProps.text;\n              var stagingTextBBox = stagingText.getBBox(); //Get line count and split the string into words\n\n              var lineCount = Math.ceil(stagingTextBBox.width / (rootNode.properties.width * App.vars.lineWrapRatio));\n              var words = htgProps.text.split(' ');\n              var newlines = htgProps.text.match(/\\\\n/g);\n              lineCount += newlines == null ? 0 : newlines.length; //Get bounding box for the string with spaces removed\n\n              stagingTextNode.nodeValue = htgProps.text.replace(/[ ]+/g, '');\n              var computedNoSpaceLength = stagingText.getComputedTextLength(); //Compute average space width\n\n              var diffLength = stagingTextBBox.width - computedNoSpaceLength;\n              var spaceWidth = Math.round(diffLength / Math.max(1, words.length - 1)); //Get widths for every word with space only if there is more than one line\n\n              var wordWidths = [];\n\n              if (lineCount > 1) {\n                stagingTextNode.nodeValue = '';\n\n                for (var i = 0; i < words.length; i++) {\n                  if (words[i].length === 0) continue;\n                  stagingTextNode.nodeValue = utils.decodeHtmlEntity(words[i]);\n                  var bbox = stagingText.getBBox();\n                  wordWidths.push({\n                    text: words[i],\n                    width: bbox.width\n                  });\n                }\n              } //Hide staging element after staging\n\n\n              svg.style.display = 'none';\n              return {\n                spaceWidth: spaceWidth,\n                lineCount: lineCount,\n                boundingBox: stagingTextBBox,\n                words: wordWidths\n              };\n            } else {\n              //todo: canvas fallback for measuring text on android 2.3\n              return false;\n            }\n          };\n        }();\n\n        var sgCanvasRenderer = function () {\n          var canvas = DOM.newEl('canvas');\n          var ctx = null;\n          return function (sceneGraph) {\n            if (ctx == null) {\n              ctx = canvas.getContext('2d');\n            }\n\n            var root = sceneGraph.root;\n            canvas.width = App.dpr(root.properties.width);\n            canvas.height = App.dpr(root.properties.height);\n            ctx.textBaseline = 'middle';\n            var bg = root.children.holderBg;\n            var bgWidth = App.dpr(bg.width);\n            var bgHeight = App.dpr(bg.height); //todo: parametrize outline width (e.g. in scene object)\n\n            var outlineWidth = 2;\n            var outlineOffsetWidth = outlineWidth / 2;\n            ctx.fillStyle = bg.properties.fill;\n            ctx.fillRect(0, 0, bgWidth, bgHeight);\n\n            if (bg.properties.outline) {\n              //todo: abstract this into a method\n              ctx.strokeStyle = bg.properties.outline.fill;\n              ctx.lineWidth = bg.properties.outline.width;\n              ctx.moveTo(outlineOffsetWidth, outlineOffsetWidth); // TL, TR, BR, BL\n\n              ctx.lineTo(bgWidth - outlineOffsetWidth, outlineOffsetWidth);\n              ctx.lineTo(bgWidth - outlineOffsetWidth, bgHeight - outlineOffsetWidth);\n              ctx.lineTo(outlineOffsetWidth, bgHeight - outlineOffsetWidth);\n              ctx.lineTo(outlineOffsetWidth, outlineOffsetWidth); // Diagonals\n\n              ctx.moveTo(0, outlineOffsetWidth);\n              ctx.lineTo(bgWidth, bgHeight - outlineOffsetWidth);\n              ctx.moveTo(0, bgHeight - outlineOffsetWidth);\n              ctx.lineTo(bgWidth, outlineOffsetWidth);\n              ctx.stroke();\n            }\n\n            var textGroup = root.children.holderTextGroup;\n            ctx.font = textGroup.properties.font.weight + ' ' + App.dpr(textGroup.properties.font.size) + textGroup.properties.font.units + ' ' + textGroup.properties.font.family + ', monospace';\n            ctx.fillStyle = textGroup.properties.fill;\n\n            for (var lineKey in textGroup.children) {\n              var line = textGroup.children[lineKey];\n\n              for (var wordKey in line.children) {\n                var word = line.children[wordKey];\n                var x = App.dpr(textGroup.x + line.x + word.x);\n                var y = App.dpr(textGroup.y + line.y + word.y + textGroup.properties.leading / 2);\n                ctx.fillText(word.properties.text, x, y);\n              }\n            }\n\n            return canvas.toDataURL('image/png');\n          };\n        }(); //Helpers\n\n        /**\n         * Prevents a function from being called too often, waits until a timer elapses to call it again\n         *\n         * @param fn Function to call\n         */\n\n\n        function debounce(fn) {\n          if (!App.vars.debounceTimer) fn.call(this);\n          if (App.vars.debounceTimer) global.clearTimeout(App.vars.debounceTimer);\n          App.vars.debounceTimer = global.setTimeout(function () {\n            App.vars.debounceTimer = null;\n            fn.call(this);\n          }, App.setup.debounce);\n        }\n        /**\n         * Holder-specific resize/orientation change callback, debounced to prevent excessive execution\n         */\n\n\n        function resizeEvent() {\n          debounce(function () {\n            updateResizableElements(null);\n          });\n        } //Set up flags\n\n\n        for (var flag in App.flags) {\n          if (!App.flags.hasOwnProperty(flag)) continue;\n\n          App.flags[flag].match = function (val) {\n            return val.match(this.regex);\n          };\n        } //Properties set once on setup\n\n\n        App.setup = {\n          renderer: 'html',\n          debounce: 100,\n          ratio: 1,\n          supportsCanvas: false,\n          supportsSVG: false,\n          lineWrapRatio: 0.9,\n          dataAttr: 'data-src',\n          renderers: ['html', 'canvas', 'svg']\n        };\n\n        App.dpr = function (val) {\n          return val * App.setup.ratio;\n        }; //Properties modified during runtime\n\n\n        App.vars = {\n          preempted: false,\n          resizableImages: [],\n          invisibleImages: {},\n          invisibleId: 0,\n          visibilityCheckStarted: false,\n          debounceTimer: null,\n          cache: {}\n        }; //Pre-flight\n\n        (function () {\n          var devicePixelRatio = 1,\n              backingStoreRatio = 1;\n          var canvas = DOM.newEl('canvas');\n          var ctx = null;\n\n          if (canvas.getContext) {\n            if (canvas.toDataURL('image/png').indexOf('data:image/png') != -1) {\n              App.setup.renderer = 'canvas';\n              ctx = canvas.getContext('2d');\n              App.setup.supportsCanvas = true;\n            }\n          }\n\n          if (App.setup.supportsCanvas) {\n            devicePixelRatio = global.devicePixelRatio || 1;\n            backingStoreRatio = ctx.webkitBackingStorePixelRatio || ctx.mozBackingStorePixelRatio || ctx.msBackingStorePixelRatio || ctx.oBackingStorePixelRatio || ctx.backingStorePixelRatio || 1;\n          }\n\n          App.setup.ratio = devicePixelRatio / backingStoreRatio;\n\n          if (!!document.createElementNS && !!document.createElementNS(SVG_NS, 'svg').createSVGRect) {\n            App.setup.renderer = 'svg';\n            App.setup.supportsSVG = true;\n          }\n        })(); //Starts checking for invisible placeholders\n\n\n        startVisibilityCheck();\n\n        if (onDomReady) {\n          onDomReady(function () {\n            if (!App.vars.preempted) {\n              Holder.run();\n            }\n\n            if (global.addEventListener) {\n              global.addEventListener('resize', resizeEvent, false);\n              global.addEventListener('orientationchange', resizeEvent, false);\n            } else {\n              global.attachEvent('onresize', resizeEvent);\n            }\n\n            if (typeof global.Turbolinks == 'object') {\n              global.document.addEventListener('page:change', function () {\n                Holder.run();\n              });\n            }\n          });\n        }\n\n        module.exports = Holder;\n        /* WEBPACK VAR INJECTION */\n      }).call(exports, function () {\n        return this;\n      }());\n      /***/\n    },\n    /* 2 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /*!\n       * onDomReady.js 1.4.0 (c) 2013 Tubal Martin - MIT license\n       *\n       * Specially modified to work with Holder.js\n       */\n      function _onDomReady(win) {\n        //Lazy loading fix for Firefox < 3.6\n        //http://webreflection.blogspot.com/2009/11/195-chars-to-help-lazy-loading.html\n        if (document.readyState == null && document.addEventListener) {\n          document.addEventListener(\"DOMContentLoaded\", function DOMContentLoaded() {\n            document.removeEventListener(\"DOMContentLoaded\", DOMContentLoaded, false);\n            document.readyState = \"complete\";\n          }, false);\n          document.readyState = \"loading\";\n        }\n\n        var doc = win.document,\n            docElem = doc.documentElement,\n            LOAD = \"load\",\n            FALSE = false,\n            ONLOAD = \"on\" + LOAD,\n            COMPLETE = \"complete\",\n            READYSTATE = \"readyState\",\n            ATTACHEVENT = \"attachEvent\",\n            DETACHEVENT = \"detachEvent\",\n            ADDEVENTLISTENER = \"addEventListener\",\n            DOMCONTENTLOADED = \"DOMContentLoaded\",\n            ONREADYSTATECHANGE = \"onreadystatechange\",\n            REMOVEEVENTLISTENER = \"removeEventListener\",\n            // W3C Event model\n        w3c = ADDEVENTLISTENER in doc,\n            _top = FALSE,\n            // isReady: Is the DOM ready to be used? Set to true once it occurs.\n        isReady = FALSE,\n            // Callbacks pending execution until DOM is ready\n        callbacks = []; // Handle when the DOM is ready\n\n        function ready(fn) {\n          if (!isReady) {\n            // Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).\n            if (!doc.body) {\n              return defer(ready);\n            } // Remember that the DOM is ready\n\n\n            isReady = true; // Execute all callbacks\n\n            while (fn = callbacks.shift()) {\n              defer(fn);\n            }\n          }\n        } // The ready event handler\n\n\n        function completed(event) {\n          // readyState === \"complete\" is good enough for us to call the dom ready in oldIE\n          if (w3c || event.type === LOAD || doc[READYSTATE] === COMPLETE) {\n            detach();\n            ready();\n          }\n        } // Clean-up method for dom ready events\n\n\n        function detach() {\n          if (w3c) {\n            doc[REMOVEEVENTLISTENER](DOMCONTENTLOADED, completed, FALSE);\n            win[REMOVEEVENTLISTENER](LOAD, completed, FALSE);\n          } else {\n            doc[DETACHEVENT](ONREADYSTATECHANGE, completed);\n            win[DETACHEVENT](ONLOAD, completed);\n          }\n        } // Defers a function, scheduling it to run after the current call stack has cleared.\n\n\n        function defer(fn, wait) {\n          // Allow 0 to be passed\n          setTimeout(fn, +wait >= 0 ? wait : 1);\n        } // Attach the listeners:\n        // Catch cases where onDomReady is called after the browser event has already occurred.\n        // we once tried to use readyState \"interactive\" here, but it caused issues like the one\n        // discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15\n\n\n        if (doc[READYSTATE] === COMPLETE) {\n          // Handle it asynchronously to allow scripts the opportunity to delay ready\n          defer(ready); // Standards-based browsers support DOMContentLoaded\n        } else if (w3c) {\n          // Use the handy event callback\n          doc[ADDEVENTLISTENER](DOMCONTENTLOADED, completed, FALSE); // A fallback to window.onload, that will always work\n\n          win[ADDEVENTLISTENER](LOAD, completed, FALSE); // If IE event model is used\n        } else {\n          // Ensure firing before onload, maybe late but safe also for iframes\n          doc[ATTACHEVENT](ONREADYSTATECHANGE, completed); // A fallback to window.onload, that will always work\n\n          win[ATTACHEVENT](ONLOAD, completed); // If IE and not a frame\n          // continually check to see if the document is ready\n\n          try {\n            _top = win.frameElement == null && docElem;\n          } catch (e) {}\n\n          if (_top && _top.doScroll) {\n            (function doScrollCheck() {\n              if (!isReady) {\n                try {\n                  // Use the trick by Diego Perini\n                  // http://javascript.nwbox.com/IEContentLoaded/\n                  _top.doScroll(\"left\");\n                } catch (e) {\n                  return defer(doScrollCheck, 50);\n                } // detach all dom ready events\n\n\n                detach(); // and execute any waiting functions\n\n                ready();\n              }\n            })();\n          }\n        }\n\n        function onDomReady(fn) {\n          // If DOM is ready, execute the function (async), otherwise wait\n          isReady ? defer(fn) : callbacks.push(fn);\n        } // Add version\n\n\n        onDomReady.version = \"1.4.0\"; // Add method to check if DOM is ready\n\n        onDomReady.isReady = function () {\n          return isReady;\n        };\n\n        return onDomReady;\n      }\n\n      module.exports = typeof window !== \"undefined\" && _onDomReady(window);\n      /***/\n    },\n    /* 3 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      //Modified version of component/querystring\n      //Changes: updated dependencies, dot notation parsing, JSHint fixes\n      //Fork at https://github.com/imsky/querystring\n\n      /**\n       * Module dependencies.\n       */\n      var encode = encodeURIComponent;\n      var decode = decodeURIComponent;\n\n      var trim = __webpack_require__(11);\n\n      var type = __webpack_require__(12);\n\n      var arrayRegex = /(\\w+)\\[(\\d+)\\]/;\n      var objectRegex = /\\w+\\.\\w+/;\n      /**\n       * Parse the given query `str`.\n       *\n       * @param {String} str\n       * @return {Object}\n       * @api public\n       */\n\n      exports.parse = function (str) {\n        if ('string' !== typeof str) return {};\n        str = trim(str);\n        if ('' === str) return {};\n        if ('?' === str.charAt(0)) str = str.slice(1);\n        var obj = {};\n        var pairs = str.split('&');\n\n        for (var i = 0; i < pairs.length; i++) {\n          var parts = pairs[i].split('=');\n          var key = decode(parts[0]);\n          var m, ctx, prop;\n\n          if (m = arrayRegex.exec(key)) {\n            obj[m[1]] = obj[m[1]] || [];\n            obj[m[1]][m[2]] = decode(parts[1]);\n            continue;\n          }\n\n          if (m = objectRegex.test(key)) {\n            m = key.split('.');\n            ctx = obj;\n\n            while (m.length) {\n              prop = m.shift();\n              if (!prop.length) continue;\n\n              if (!ctx[prop]) {\n                ctx[prop] = {};\n              } else if (ctx[prop] && typeof ctx[prop] !== 'object') {\n                break;\n              }\n\n              if (!m.length) {\n                ctx[prop] = decode(parts[1]);\n              }\n\n              ctx = ctx[prop];\n            }\n\n            continue;\n          }\n\n          obj[parts[0]] = null == parts[1] ? '' : decode(parts[1]);\n        }\n\n        return obj;\n      };\n      /**\n       * Stringify the given `obj`.\n       *\n       * @param {Object} obj\n       * @return {String}\n       * @api public\n       */\n\n\n      exports.stringify = function (obj) {\n        if (!obj) return '';\n        var pairs = [];\n\n        for (var key in obj) {\n          var value = obj[key];\n\n          if ('array' == type(value)) {\n            for (var i = 0; i < value.length; ++i) {\n              pairs.push(encode(key + '[' + i + ']') + '=' + encode(value[i]));\n            }\n\n            continue;\n          }\n\n          pairs.push(encode(key) + '=' + encode(obj[key]));\n        }\n\n        return pairs.join('&');\n      };\n      /***/\n\n    },\n    /* 4 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var SceneGraph = function SceneGraph(sceneProperties) {\n        var nodeCount = 1; //todo: move merge to helpers section\n\n        function merge(parent, child) {\n          for (var prop in child) {\n            parent[prop] = child[prop];\n          }\n\n          return parent;\n        }\n\n        var SceneNode = function SceneNode(name) {\n          nodeCount++;\n          this.parent = null;\n          this.children = {};\n          this.id = nodeCount;\n          this.name = 'n' + nodeCount;\n\n          if (typeof name !== 'undefined') {\n            this.name = name;\n          }\n\n          this.x = this.y = this.z = 0;\n          this.width = this.height = 0;\n        };\n\n        SceneNode.prototype.resize = function (width, height) {\n          if (width != null) {\n            this.width = width;\n          }\n\n          if (height != null) {\n            this.height = height;\n          }\n        };\n\n        SceneNode.prototype.moveTo = function (x, y, z) {\n          this.x = x != null ? x : this.x;\n          this.y = y != null ? y : this.y;\n          this.z = z != null ? z : this.z;\n        };\n\n        SceneNode.prototype.add = function (child) {\n          var name = child.name;\n\n          if (typeof this.children[name] === 'undefined') {\n            this.children[name] = child;\n            child.parent = this;\n          } else {\n            throw 'SceneGraph: child already exists: ' + name;\n          }\n        };\n\n        var RootNode = function RootNode() {\n          SceneNode.call(this, 'root');\n          this.properties = sceneProperties;\n        };\n\n        RootNode.prototype = new SceneNode();\n\n        var Shape = function Shape(name, props) {\n          SceneNode.call(this, name);\n          this.properties = {\n            'fill': '#000000'\n          };\n\n          if (typeof props !== 'undefined') {\n            merge(this.properties, props);\n          } else if (typeof name !== 'undefined' && typeof name !== 'string') {\n            throw 'SceneGraph: invalid node name';\n          }\n        };\n\n        Shape.prototype = new SceneNode();\n\n        var Group = function Group() {\n          Shape.apply(this, arguments);\n          this.type = 'group';\n        };\n\n        Group.prototype = new Shape();\n\n        var Rect = function Rect() {\n          Shape.apply(this, arguments);\n          this.type = 'rect';\n        };\n\n        Rect.prototype = new Shape();\n\n        var Text = function Text(text) {\n          Shape.call(this);\n          this.type = 'text';\n          this.properties.text = text;\n        };\n\n        Text.prototype = new Shape();\n        var root = new RootNode();\n        this.Shape = {\n          'Rect': Rect,\n          'Text': Text,\n          'Group': Group\n        };\n        this.root = root;\n        return this;\n      };\n\n      module.exports = SceneGraph;\n      /***/\n    },\n    /* 5 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * Shallow object clone and merge\n       *\n       * @param a Object A\n       * @param b Object B\n       * @returns {Object} New object with all of A's properties, and all of B's properties, overwriting A's properties\n       */\n      exports.extend = function (a, b) {\n        var c = {};\n\n        for (var x in a) {\n          if (a.hasOwnProperty(x)) {\n            c[x] = a[x];\n          }\n        }\n\n        if (b != null) {\n          for (var y in b) {\n            if (b.hasOwnProperty(y)) {\n              c[y] = b[y];\n            }\n          }\n        }\n\n        return c;\n      };\n      /**\n       * Takes a k/v list of CSS properties and returns a rule\n       *\n       * @param props CSS properties object\n       */\n\n\n      exports.cssProps = function (props) {\n        var ret = [];\n\n        for (var p in props) {\n          if (props.hasOwnProperty(p)) {\n            ret.push(p + ':' + props[p]);\n          }\n        }\n\n        return ret.join(';');\n      };\n      /**\n       * Encodes HTML entities in a string\n       *\n       * @param str Input string\n       */\n\n\n      exports.encodeHtmlEntity = function (str) {\n        var buf = [];\n        var charCode = 0;\n\n        for (var i = str.length - 1; i >= 0; i--) {\n          charCode = str.charCodeAt(i);\n\n          if (charCode > 128) {\n            buf.unshift(['&#', charCode, ';'].join(''));\n          } else {\n            buf.unshift(str[i]);\n          }\n        }\n\n        return buf.join('');\n      };\n      /**\n       * Checks if an image exists\n       *\n       * @param src URL of image\n       * @param callback Callback to call once image status has been found\n       */\n\n\n      exports.imageExists = function (src, callback) {\n        var image = new Image();\n\n        image.onerror = function () {\n          callback.call(this, false);\n        };\n\n        image.onload = function () {\n          callback.call(this, true);\n        };\n\n        image.src = src;\n      };\n      /**\n       * Decodes HTML entities in a string\n       *\n       * @param str Input string\n       */\n\n\n      exports.decodeHtmlEntity = function (str) {\n        return str.replace(/&#(\\d+);/g, function (match, dec) {\n          return String.fromCharCode(dec);\n        });\n      };\n      /**\n       * Returns an element's dimensions if it's visible, `false` otherwise.\n       *\n       * @param el DOM element\n       */\n\n\n      exports.dimensionCheck = function (el) {\n        var dimensions = {\n          height: el.clientHeight,\n          width: el.clientWidth\n        };\n\n        if (dimensions.height && dimensions.width) {\n          return dimensions;\n        } else {\n          return false;\n        }\n      };\n      /**\n       * Returns true if value is truthy or if it is \"semantically truthy\"\n       * @param val\n       */\n\n\n      exports.truthy = function (val) {\n        if (typeof val === 'string') {\n          return val === 'true' || val === 'yes' || val === '1' || val === 'on' || val === 'â';\n        }\n\n        return !!val;\n      };\n      /**\n       * Parses input into a well-formed CSS color\n       * @param val\n       */\n\n\n      exports.parseColor = function (val) {\n        var hexre = /(^(?:#?)[0-9a-f]{6}$)|(^(?:#?)[0-9a-f]{3}$)/i;\n        var rgbre = /^rgb\\((\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*\\)$/;\n        var rgbare = /^rgba\\((\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(\\d{1,3})\\s*,\\s*(0\\.\\d{1,}|1)\\)$/;\n        var match = val.match(hexre);\n        var retval;\n\n        if (match !== null) {\n          retval = match[1] || match[2];\n\n          if (retval[0] !== '#') {\n            return '#' + retval;\n          } else {\n            return retval;\n          }\n        }\n\n        match = val.match(rgbre);\n\n        if (match !== null) {\n          retval = 'rgb(' + match.slice(1).join(',') + ')';\n          return retval;\n        }\n\n        match = val.match(rgbare);\n\n        if (match !== null) {\n          retval = 'rgba(' + match.slice(1).join(',') + ')';\n          return retval;\n        }\n\n        return null;\n      };\n      /***/\n\n    },\n    /* 6 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /* WEBPACK VAR INJECTION */\n      (function (global) {\n        var DOM = __webpack_require__(7);\n\n        var SVG_NS = 'http://www.w3.org/2000/svg';\n        var NODE_TYPE_COMMENT = 8;\n        /**\n         * Generic SVG element creation function\n         *\n         * @param svg SVG context, set to null if new\n         * @param width Document width\n         * @param height Document height\n         */\n\n        exports.initSVG = function (svg, width, height) {\n          var defs,\n              style,\n              initialize = false;\n\n          if (svg && svg.querySelector) {\n            style = svg.querySelector('style');\n\n            if (style === null) {\n              initialize = true;\n            }\n          } else {\n            svg = DOM.newEl('svg', SVG_NS);\n            initialize = true;\n          }\n\n          if (initialize) {\n            defs = DOM.newEl('defs', SVG_NS);\n            style = DOM.newEl('style', SVG_NS);\n            DOM.setAttr(style, {\n              'type': 'text/css'\n            });\n            defs.appendChild(style);\n            svg.appendChild(defs);\n          } //IE throws an exception if this is set and Chrome requires it to be set\n\n\n          if (svg.webkitMatchesSelector) {\n            svg.setAttribute('xmlns', SVG_NS);\n          } //Remove comment nodes\n\n\n          for (var i = 0; i < svg.childNodes.length; i++) {\n            if (svg.childNodes[i].nodeType === NODE_TYPE_COMMENT) {\n              svg.removeChild(svg.childNodes[i]);\n            }\n          } //Remove CSS\n\n\n          while (style.childNodes.length) {\n            style.removeChild(style.childNodes[0]);\n          }\n\n          DOM.setAttr(svg, {\n            'width': width,\n            'height': height,\n            'viewBox': '0 0 ' + width + ' ' + height,\n            'preserveAspectRatio': 'none'\n          });\n          return svg;\n        };\n        /**\n         * Converts serialized SVG to a string suitable for data URI use\n         * @param svgString Serialized SVG string\n         * @param [base64] Use base64 encoding for data URI\n         */\n\n\n        exports.svgStringToDataURI = function () {\n          var rawPrefix = 'data:image/svg+xml;charset=UTF-8,';\n          var base64Prefix = 'data:image/svg+xml;charset=UTF-8;base64,';\n          return function (svgString, base64) {\n            if (base64) {\n              return base64Prefix + btoa(global.unescape(encodeURIComponent(svgString)));\n            } else {\n              return rawPrefix + encodeURIComponent(svgString);\n            }\n          };\n        }();\n        /**\n         * Returns serialized SVG with XML processing instructions\n         *\n         * @param svg SVG context\n         * @param stylesheets CSS stylesheets to include\n         */\n\n\n        exports.serializeSVG = function (svg, engineSettings) {\n          if (!global.XMLSerializer) return;\n          var serializer = new XMLSerializer();\n          var svgCSS = '';\n          var stylesheets = engineSettings.stylesheets; //External stylesheets: Processing Instruction method\n\n          if (engineSettings.svgXMLStylesheet) {\n            var xml = DOM.createXML(); //Add <?xml-stylesheet ?> directives\n\n            for (var i = stylesheets.length - 1; i >= 0; i--) {\n              var csspi = xml.createProcessingInstruction('xml-stylesheet', 'href=\"' + stylesheets[i] + '\" rel=\"stylesheet\"');\n              xml.insertBefore(csspi, xml.firstChild);\n            }\n\n            xml.removeChild(xml.documentElement);\n            svgCSS = serializer.serializeToString(xml);\n          }\n\n          var svgText = serializer.serializeToString(svg);\n          svgText = svgText.replace(/\\&amp;(\\#[0-9]{2,}\\;)/g, '&$1');\n          return svgCSS + svgText;\n        };\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, function () {\n        return this;\n      }());\n      /***/\n    },\n    /* 7 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /* WEBPACK VAR INJECTION */\n      (function (global) {\n        /**\n        * Generic new DOM element function\n        *\n        * @param tag Tag to create\n        * @param namespace Optional namespace value\n        */\n        exports.newEl = function (tag, namespace) {\n          if (!global.document) return;\n\n          if (namespace == null) {\n            return global.document.createElement(tag);\n          } else {\n            return global.document.createElementNS(namespace, tag);\n          }\n        };\n        /**\n         * Generic setAttribute function\n         *\n         * @param el Reference to DOM element\n         * @param attrs Object with attribute keys and values\n         */\n\n\n        exports.setAttr = function (el, attrs) {\n          for (var a in attrs) {\n            el.setAttribute(a, attrs[a]);\n          }\n        };\n        /**\n         * Creates a XML document\n         * @private\n         */\n\n\n        exports.createXML = function () {\n          if (!global.DOMParser) return;\n          return new DOMParser().parseFromString('<xml />', 'application/xml');\n        };\n        /**\n         * Converts a value into an array of DOM nodes\n         *\n         * @param val A string, a NodeList, a Node, or an HTMLCollection\n         */\n\n\n        exports.getNodeArray = function (val) {\n          var retval = null;\n\n          if (typeof val == 'string') {\n            retval = document.querySelectorAll(val);\n          } else if (global.NodeList && val instanceof global.NodeList) {\n            retval = val;\n          } else if (global.Node && val instanceof global.Node) {\n            retval = [val];\n          } else if (global.HTMLCollection && val instanceof global.HTMLCollection) {\n            retval = val;\n          } else if (val instanceof Array) {\n            retval = val;\n          } else if (val === null) {\n            retval = [];\n          }\n\n          retval = Array.prototype.slice.call(retval);\n          return retval;\n        };\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, function () {\n        return this;\n      }());\n      /***/\n    },\n    /* 8 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      var Color = function Color(color, options) {\n        //todo: support rgba, hsla, and rrggbbaa notation\n        //todo: use CIELAB internally\n        //todo: add clamp function (with sign)\n        if (typeof color !== 'string') return;\n        this.original = color;\n\n        if (color.charAt(0) === '#') {\n          color = color.slice(1);\n        }\n\n        if (/[^a-f0-9]+/i.test(color)) return;\n\n        if (color.length === 3) {\n          color = color.replace(/./g, '$&$&');\n        }\n\n        if (color.length !== 6) return;\n        this.alpha = 1;\n\n        if (options && options.alpha) {\n          this.alpha = options.alpha;\n        }\n\n        this.set(parseInt(color, 16));\n      }; //todo: jsdocs\n\n\n      Color.rgb2hex = function (r, g, b) {\n        function format(decimal) {\n          var hex = (decimal | 0).toString(16);\n\n          if (decimal < 16) {\n            hex = '0' + hex;\n          }\n\n          return hex;\n        }\n\n        return [r, g, b].map(format).join('');\n      }; //todo: jsdocs\n\n\n      Color.hsl2rgb = function (h, s, l) {\n        var H = h / 60;\n        var C = (1 - Math.abs(2 * l - 1)) * s;\n        var X = C * (1 - Math.abs(parseInt(H) % 2 - 1));\n        var m = l - C / 2;\n        var r = 0,\n            g = 0,\n            b = 0;\n\n        if (H >= 0 && H < 1) {\n          r = C;\n          g = X;\n        } else if (H >= 1 && H < 2) {\n          r = X;\n          g = C;\n        } else if (H >= 2 && H < 3) {\n          g = C;\n          b = X;\n        } else if (H >= 3 && H < 4) {\n          g = X;\n          b = C;\n        } else if (H >= 4 && H < 5) {\n          r = X;\n          b = C;\n        } else if (H >= 5 && H < 6) {\n          r = C;\n          b = X;\n        }\n\n        r += m;\n        g += m;\n        b += m;\n        r = parseInt(r * 255);\n        g = parseInt(g * 255);\n        b = parseInt(b * 255);\n        return [r, g, b];\n      };\n      /**\n       * Sets the color from a raw RGB888 integer\n       * @param raw RGB888 representation of color\n       */\n      //todo: refactor into a static method\n      //todo: factor out individual color spaces\n      //todo: add HSL, CIELAB, and CIELUV\n\n\n      Color.prototype.set = function (val) {\n        this.raw = val;\n        var r = (this.raw & 0xFF0000) >> 16;\n        var g = (this.raw & 0x00FF00) >> 8;\n        var b = this.raw & 0x0000FF; // BT.709\n\n        var y = 0.2126 * r + 0.7152 * g + 0.0722 * b;\n        var u = -0.09991 * r - 0.33609 * g + 0.436 * b;\n        var v = 0.615 * r - 0.55861 * g - 0.05639 * b;\n        this.rgb = {\n          r: r,\n          g: g,\n          b: b\n        };\n        this.yuv = {\n          y: y,\n          u: u,\n          v: v\n        };\n        return this;\n      };\n      /**\n       * Lighten or darken a color\n       * @param multiplier Amount to lighten or darken (-1 to 1)\n       */\n\n\n      Color.prototype.lighten = function (multiplier) {\n        var cm = Math.min(1, Math.max(0, Math.abs(multiplier))) * (multiplier < 0 ? -1 : 1);\n        var bm = 255 * cm | 0;\n        var cr = Math.min(255, Math.max(0, this.rgb.r + bm));\n        var cg = Math.min(255, Math.max(0, this.rgb.g + bm));\n        var cb = Math.min(255, Math.max(0, this.rgb.b + bm));\n        var hex = Color.rgb2hex(cr, cg, cb);\n        return new Color(hex);\n      };\n      /**\n       * Output color in hex format\n       * @param addHash Add a hash character to the beginning of the output\n       */\n\n\n      Color.prototype.toHex = function (addHash) {\n        return (addHash ? '#' : '') + this.raw.toString(16);\n      };\n      /**\n       * Returns whether or not current color is lighter than another color\n       * @param color Color to compare against\n       */\n\n\n      Color.prototype.lighterThan = function (color) {\n        if (!(color instanceof Color)) {\n          color = new Color(color);\n        }\n\n        return this.yuv.y > color.yuv.y;\n      };\n      /**\n       * Returns the result of mixing current color with another color\n       * @param color Color to mix with\n       * @param multiplier How much to mix with the other color\n       */\n\n      /*\n      Color.prototype.mix = function (color, multiplier) {\n          if (!(color instanceof Color)) {\n              color = new Color(color);\n          }\n      \t    var r = this.rgb.r;\n          var g = this.rgb.g;\n          var b = this.rgb.b;\n          var a = this.alpha;\n      \t    var m = typeof multiplier !== 'undefined' ? multiplier : 0.5;\n      \t    //todo: write a lerp function\n          r = r + m * (color.rgb.r - r);\n          g = g + m * (color.rgb.g - g);\n          b = b + m * (color.rgb.b - b);\n          a = a + m * (color.alpha - a);\n      \t    return new Color(Color.rgbToHex(r, g, b), {\n              'alpha': a\n          });\n      };\n      */\n\n      /**\n       * Returns the result of blending another color on top of current color with alpha\n       * @param color Color to blend on top of current color, i.e. \"Ca\"\n       */\n      //todo: see if .blendAlpha can be merged into .mix\n\n\n      Color.prototype.blendAlpha = function (color) {\n        if (!(color instanceof Color)) {\n          color = new Color(color);\n        }\n\n        var Ca = color;\n        var Cb = this; //todo: write alpha blending function\n\n        var r = Ca.alpha * Ca.rgb.r + (1 - Ca.alpha) * Cb.rgb.r;\n        var g = Ca.alpha * Ca.rgb.g + (1 - Ca.alpha) * Cb.rgb.g;\n        var b = Ca.alpha * Ca.rgb.b + (1 - Ca.alpha) * Cb.rgb.b;\n        return new Color(Color.rgb2hex(r, g, b));\n      };\n\n      module.exports = Color;\n      /***/\n    },\n    /* 9 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      module.exports = {\n        'version': '2.8.2',\n        'svg_ns': 'http://www.w3.org/2000/svg'\n      };\n      /***/\n    },\n    /* 10 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /* WEBPACK VAR INJECTION */\n      (function (global) {\n        var SVG = __webpack_require__(6);\n\n        var DOM = __webpack_require__(7);\n\n        var utils = __webpack_require__(5);\n\n        var constants = __webpack_require__(9);\n\n        var SVG_NS = constants.svg_ns;\n        var generatorComment = '\\n' + 'Created with Holder.js ' + constants.version + '.\\n' + 'Learn more at http://holderjs.com\\n' + '(c) 2012-2015 Ivan Malopinsky - http://imsky.co\\n';\n\n        module.exports = function () {\n          //Prevent IE <9 from initializing SVG renderer\n          if (!global.XMLSerializer) return;\n          var xml = DOM.createXML();\n          var svg = SVG.initSVG(null, 0, 0);\n          var bgEl = DOM.newEl('rect', SVG_NS);\n          svg.appendChild(bgEl); //todo: create a reusable pool for textNodes, resize if more words present\n\n          return function (sceneGraph, renderSettings) {\n            var root = sceneGraph.root;\n            SVG.initSVG(svg, root.properties.width, root.properties.height);\n            var groups = svg.querySelectorAll('g');\n\n            for (var i = 0; i < groups.length; i++) {\n              groups[i].parentNode.removeChild(groups[i]);\n            }\n\n            var holderURL = renderSettings.holderSettings.flags.holderURL;\n            var holderId = 'holder_' + (Number(new Date()) + 32768 + (0 | Math.random() * 32768)).toString(16);\n            var sceneGroupEl = DOM.newEl('g', SVG_NS);\n            var textGroup = root.children.holderTextGroup;\n            var tgProps = textGroup.properties;\n            var textGroupEl = DOM.newEl('g', SVG_NS);\n            var tpdata = textGroup.textPositionData;\n            var textCSSRule = '#' + holderId + ' text { ' + utils.cssProps({\n              'fill': tgProps.fill,\n              'font-weight': tgProps.font.weight,\n              'font-family': tgProps.font.family + ', monospace',\n              'font-size': tgProps.font.size + tgProps.font.units\n            }) + ' } ';\n            var commentNode = xml.createComment('\\n' + 'Source URL: ' + holderURL + generatorComment);\n            var holderCSS = xml.createCDATASection(textCSSRule);\n            var styleEl = svg.querySelector('style');\n            var bg = root.children.holderBg;\n            DOM.setAttr(sceneGroupEl, {\n              id: holderId\n            });\n            svg.insertBefore(commentNode, svg.firstChild);\n            styleEl.appendChild(holderCSS);\n            sceneGroupEl.appendChild(bgEl); //todo: abstract this into a cross-browser SVG outline method\n\n            if (bg.properties.outline) {\n              var outlineEl = DOM.newEl('path', SVG_NS);\n              var outlineWidth = bg.properties.outline.width;\n              var outlineOffsetWidth = outlineWidth / 2;\n              DOM.setAttr(outlineEl, {\n                'd': ['M', outlineOffsetWidth, outlineOffsetWidth, 'H', bg.width - outlineOffsetWidth, 'V', bg.height - outlineOffsetWidth, 'H', outlineOffsetWidth, 'V', 0, 'M', 0, outlineOffsetWidth, 'L', bg.width, bg.height - outlineOffsetWidth, 'M', 0, bg.height - outlineOffsetWidth, 'L', bg.width, outlineOffsetWidth].join(' '),\n                'stroke-width': bg.properties.outline.width,\n                'stroke': bg.properties.outline.fill,\n                'fill': 'none'\n              });\n              sceneGroupEl.appendChild(outlineEl);\n            }\n\n            sceneGroupEl.appendChild(textGroupEl);\n            svg.appendChild(sceneGroupEl);\n            DOM.setAttr(bgEl, {\n              'width': bg.width,\n              'height': bg.height,\n              'fill': bg.properties.fill\n            });\n            textGroup.y += tpdata.boundingBox.height * 0.8;\n\n            for (var lineKey in textGroup.children) {\n              var line = textGroup.children[lineKey];\n\n              for (var wordKey in line.children) {\n                var word = line.children[wordKey];\n                var x = textGroup.x + line.x + word.x;\n                var y = textGroup.y + line.y + word.y;\n                var textEl = DOM.newEl('text', SVG_NS);\n                var textNode = document.createTextNode(null);\n                DOM.setAttr(textEl, {\n                  'x': x,\n                  'y': y\n                });\n                textNode.nodeValue = word.properties.text;\n                textEl.appendChild(textNode);\n                textGroupEl.appendChild(textEl);\n              }\n            } //todo: factor the background check up the chain, perhaps only return reference\n\n\n            var svgString = SVG.svgStringToDataURI(SVG.serializeSVG(svg, renderSettings.engineSettings), renderSettings.mode === 'background');\n            return svgString;\n          };\n        }();\n        /* WEBPACK VAR INJECTION */\n\n      }).call(exports, function () {\n        return this;\n      }());\n      /***/\n    },\n    /* 11 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      exports = module.exports = trim;\n\n      function trim(str) {\n        return str.replace(/^\\s*|\\s*$/g, '');\n      }\n\n      exports.left = function (str) {\n        return str.replace(/^\\s*/, '');\n      };\n\n      exports.right = function (str) {\n        return str.replace(/\\s*$/, '');\n      };\n      /***/\n\n    },\n    /* 12 */\n\n    /***/\n    function (module, exports, __webpack_require__) {\n      /**\n       * toString ref.\n       */\n      var toString = Object.prototype.toString;\n      /**\n       * Return the type of `val`.\n       *\n       * @param {Mixed} val\n       * @return {String}\n       * @api public\n       */\n\n      module.exports = function (val) {\n        switch (toString.call(val)) {\n          case '[object Date]':\n            return 'date';\n\n          case '[object RegExp]':\n            return 'regexp';\n\n          case '[object Arguments]':\n            return 'arguments';\n\n          case '[object Array]':\n            return 'array';\n\n          case '[object Error]':\n            return 'error';\n        }\n\n        if (val === null) return 'null';\n        if (val === undefined) return 'undefined';\n        if (val !== val) return 'nan';\n        if (val && val.nodeType === 1) return 'element';\n        val = val.valueOf ? val.valueOf() : Object.prototype.valueOf.apply(val);\n        return typeof val;\n      };\n      /***/\n\n    }\n    /******/\n    ])\n  );\n});\n\n;\n\n(function (ctx, isMeteorPackage) {\n  if (isMeteorPackage) {\n    Holder = ctx.Holder;\n  }\n})(this, typeof Meteor !== 'undefined' && typeof Package !== 'undefined');","map":null,"metadata":{},"sourceType":"script"}