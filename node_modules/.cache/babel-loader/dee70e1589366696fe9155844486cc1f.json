{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\sebal\\\\Desktop\\\\Coding\\\\reactJS\\\\project-euler-app\\\\src\\\\CardGroup.js\";\nimport React, { Component } from \"react\";\nimport CardColumns from \"react-bootstrap/CardColumns\";\nimport ProblemCard from \"./ProblemCard\";\nimport Prism from \"prismjs\";\nimport \"./prism.css\";\nimport \"./CardGroup.css\";\n\nvar CardGroup =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CardGroup, _Component);\n\n  _createClass(CardGroup, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      Prism.highlightAll();\n      console.log(\"highlight\");\n    }\n  }]);\n\n  function CardGroup(props) {\n    var _this;\n\n    _classCallCheck(this, CardGroup);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CardGroup).call(this, props));\n\n    _this.isPandigital = function (str) {\n      return str.includes(\"1\") && str.includes(\"2\") && str.includes(\"3\") && str.includes(\"4\") && str.includes(\"5\") && str.includes(\"6\") && str.includes(\"7\") && str.includes(\"8\") && str.includes(\"9\");\n    };\n\n    _this.state = {\n      lychrelNumbers: \"\"\n    };\n    return _this;\n  }\n\n  _createClass(CardGroup, [{\n    key: \"handleClick\",\n    value: function handleClick(title, problem, solution) {\n      this.props.onClick(title, problem, solution);\n    }\n  }, {\n    key: \"changeLychrelInput\",\n    value: function changeLychrelInput(event) {\n      this.setState({\n        lychrelNumbers: event.target.value\n      });\n    }\n  }, {\n    key: \"solve\",\n    value: function solve() {\n      var currentLargest = 0; // largest must start with a 9\n      // but can't be more than 5 digits (n>1)\n      // so i should probably start with a 9\n      // but doing that means n must be 2 (maybe?)\n      // so start at 9999 and go until 9000\n\n      for (var i = 9999; i > 9000; i--) {\n        panTest = i.toString() + (i * 2).toString();\n\n        if (isPandigital(panTest)) {\n          console.log(panTest);\n        }\n      }\n    }\n  }, {\n    key: \"reverse\",\n    value: function reverse(num) {\n      return Number.parseInt(num.toString().split(\"\").reverse().join(\"\"));\n    }\n  }, {\n    key: \"solution\",\n    value: function solution() {\n      var polynomialX = function polynomialX(x) {\n        return [-79 - 2 * x, 1601 + 79 * x + Math.pow(x, 2)];\n      };\n\n      var lastAB = [];\n\n      for (var i = -50; i < 0; i++) {\n        var _polynomialX = polynomialX(i),\n            _polynomialX2 = _slicedToArray(_polynomialX, 2),\n            a = _polynomialX2[0],\n            b = _polynomialX2[1];\n\n        if (b > 1000 || b < -1000 || a > 1000 || a < -1000) break;\n        lastAB = [a, b];\n      }\n\n      return lastAB[0] * lastAB[1];\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      this.lychrelProblem = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, \"If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }), \"Not all numbers produce palindromes so quickly. For example,\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 84\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u2003349 + 943 = 1292,\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u20031292 + 2921 = 4213\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u20034213 + 3124 = 7337\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 90\n        },\n        __self: this\n      }), \"That is, 349 took three iterations to arrive at a palindrome.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93\n        },\n        __self: this\n      }), \"Although no one has proved it yet, it is thought that some numbers, like 196, never produce a palindrome. A number that never forms a palindrome through the reverse and add process is called a Lychrel number. Due to the theoretical nature of these numbers, and for the purpose of this problem, we shall assume that a number is Lychrel until proven otherwise. In addition you are given that for every number below ten-thousand, it will either (i) become a palindrome in less than fifty iterations, or, (ii) no one, with all the computing power that exists, has managed so far to map it to a palindrome. In fact, 10677 is the first number to be shown to require over fifty iterations before producing a palindrome: 4668731596684224866951378664 (53 iterations, 28-digits).\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }), \"Surprisingly, there are palindromic numbers that are themselves Lychrel numbers; the first example is 4994.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), \"How many Lychrel numbers are there below ten-thousand?\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      })));\n      this.lychrelSolution = React.createElement(\"div\", {\n        style: {\n          padding: \"0 , 10vw\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        className: \"mainText\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"We start with two for loops that form the basis of the algorithim. One will search every number from 0 to the target, and the other one will check every number to see if it is a lychrel\"), React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"code\", {\n        className: \"language-javascript\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"\\n\\t\\t\\tlychrelSolve(target) {\\n\\t\\t\\t\\tfor (let i = 0; i < target; i ++) {\\n\\t\\t\\t\\t\\tfor(let n = 0; n < 50; n++) {\\n\\t\\t\\t\\t\\t\\t//check for Lychrel\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"We need to add a way to get the palendrome of a number, so we will write a function which takes an integer as input and returns the palendrom. Javascript has no built in methods to reverse the order of characters in an integer, but we can get around this by first turning it into a string, then reversing it, then putting it back together\"), React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"code\", {\n        className: \"language-javascript\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, \"\\n\\t\\t\\treverse(int) {\\n\\t\\t\\t\\treturn Number.parseInt(\\n\\t\\t\\t\\t\\tint\\n\\t\\t\\t\\t\\t\\t.toString()\\n\\t\\t\\t\\t\\t\\t.split(\\\"\\\")\\n\\t\\t\\t\\t\\t\\t.reverse()\\n\\t\\t\\t\\t\\t\\t.join(\\\"\\\")\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tlychrelSolve(target) {\\n\\t\\t\\t\\tfor (let i = 0; i < target; i ++) {\\n\\t\\t\\t\\t\\tfor(let n = 0; n < 50; n++) {\\n\\t\\t\\t\\t\\t\\t//check for Lychrel\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t}\\n\\t\\t\\t\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Now all we have to do is add the number to its palendrom and see if it becomes a palendrom itself. If it gets to the 50th iteration, as stated in the problem we can assume Lychrelness, and add it to our count\"), React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"code\", {\n        className: \"language-javascript\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, \"\\n\\t\\t\\treverse(int) {\\n\\t\\t\\t\\treturn Number.parseInt(\\n\\t\\t\\t\\t\\tint\\n\\t\\t\\t\\t\\t\\t.toString()\\n\\t\\t\\t\\t\\t\\t.split(\\\"\\\")\\n\\t\\t\\t\\t\\t\\t.reverse()\\n\\t\\t\\t\\t\\t\\t.join(\\\"\\\")\\n\\t\\t\\t\\t);\\n\\t\\t\\t}\\n\\t\\t\\tlychrelSolve(target) {\\n\\t\\t\\t\\tlet reverse;\\n\\t\\t\\t\\tlet sum;\\n\\t\\t\\t\\tlet count = 0;\\n\\t\\t\\t\\tfor (let i = 0; i < target; i ++) {\\n\\t\\t\\t\\t\\tsum = i;\\n\\t\\t\\t\\t\\tfor(let n = 0; n < 50; n++) {\\n\\t\\t\\t\\t\\t\\tif (sum === reverse(sum)){\\n\\t\\t\\t\\t\\t\\t\\tbreak;\\n\\t\\t\\t\\t\\t\\t} else if (n === 49) {\\n\\t\\t\\t\\t\\t\\t\\tcount += 1;\\n\\t\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t\\t}\\n\\t\\t\\t\\t}\\n\\t\\t\\t\\treturn count;\\n\\t\\t\\t}\\n\\t\\t\\t\")));\n      this.quadraticPrimesProblem = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, \"Euler discovered the remarkable quadratic formula:\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u2003 \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, \"n\"), React.createElement(\"sup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"2\"), \" + \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, \"n\"), \" + 41 \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }), \"It turns out that the formula will produce 40 primes for the consecutive integer values 0 \\u2264 \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"n\"), \" \\u2264 39. However, when \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      }, \"n\"), \" = 40, 40\", React.createElement(\"sup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217\n        },\n        __self: this\n      }, \"2\"), \"+ 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and certainly when \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 218\n        },\n        __self: this\n      }, \"n\"), \"= 41, 412 + 41 + 41 is clearly divisible by 41.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        },\n        __self: this\n      }), \"The incredible formula \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, \"n\"), React.createElement(\"sup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"2\"), \" \\u2212 79\", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"n\"), \" + 1601 was discovered, which produces 80 primes for the consecutive values 0 \\u2264 \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, \"n\"), \" \\u2264 79. The product of the coefficients, \\u221279 and 1601, is \\u2212126479. \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 225\n        },\n        __self: this\n      }), \"Considering quadratics of the form:\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), \" \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u2003n\", React.createElement(\"sup\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"2\"), \" + \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"an\"), \" + \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228\n        },\n        __self: this\n      }, \"b\"), \", where |\", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"a\"), \"| < 1000 and |\", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 229\n        },\n        __self: this\n      }, \"b\"), \"| \\u2265 1000\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 230\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 231\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u2003 where |\", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 232\n        },\n        __self: this\n      }, \"n\"), \"| is the modulus/absolute value of \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, \"n\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u2003 e.g. |11| = 11 and |\\u22124| = 4 \", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }), \"Find the product of the coefficients, \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"a\"), \" and \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 237\n        },\n        __self: this\n      }, \"b\"), \", for the quadratic expression that produces the maximum number of primes for consecutive values of \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"n\"), \", starting with \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 239\n        },\n        __self: this\n      }, \"n\"), \" = 0.\");\n      this.quadraticPrimesSolution = React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 243\n        },\n        __self: this\n      }, React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 244\n        },\n        __self: this\n      }, React.createElement(\"code\", {\n        className: \"language-javascript\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, \"\\n\\t\\t\\tfunction solution() {\\n\\t\\t\\t\\tlet polynomialX = (x) => {\\n\\t\\t\\t\\t\\treturn [-79 - 2 * x, 1601 + 79 * x + Math.pow(x, 2)];\\n\\t\\t\\t\\t};\\n\\n\\t\\t\\t\\tlet lastAB = [];\\n\\n\\t\\t\\t\\tfor (let i = -50; i < 0; i++) {\\n\\t\\t\\t\\t\\tvar [a, b] = polynomialX(i);\\n\\t\\t\\t\\t\\tif (b > 1000 || b < -1000 || a > 1000 || a < -1000) break;\\n\\t\\t\\t\\t\\tlastAB = [a, b];\\n\\t\\t\\t\\t}\\n\\n\\t\\t\\t\\treturn lastAB[0] * lastAB[1];\\n\\t\\t\\t}\\n\\t\\t\")));\n      this.pandigitalMultiplesProblem = React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, \"Take the number 192 and multiply it by each of 1, 2, and 3:\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u2003192 \\xD7 1 = 192\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u2003192 \\xD7 2 = 384\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }), \"\\u2003\\u2003\\u2003\\u2003192 \\xD7 3 = 576\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 278\n        },\n        __self: this\n      }), \"By concatenating each product we get the 1 to 9 pandigital, 192384576. We will call 192384576 the concatenated product of 192 and (1,2,3)\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }), \"The same can be achieved by starting with 9 and multiplying by 1, 2, 3, 4, and 5, giving the pandigital, 918273645, which is the concatenated product of 9 and (1, 2, 3, 4, 5).\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 286\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 287\n        },\n        __self: this\n      }), \"What is the largest 1 to 9 pandigital 9-digit number that can be formed as the concatenated product of an integer with (1, 2, ... , \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 289\n        },\n        __self: this\n      }, \"n\"), \") where \", React.createElement(\"i\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 290\n        },\n        __self: this\n      }, \"n\"), \" > 1?\");\n      this.pandigitalMultiplesSolution = React.createElement(\"pre\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }, React.createElement(\"code\", {\n        className: \"language-javascript\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 296\n        },\n        __self: this\n      }, \"\\n\\t\\t  \\n\\t\\t\"));\n      return React.createElement(\"div\", {\n        id: \"card-columns\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(CardColumns, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, React.createElement(ProblemCard, {\n        title: \"Lychrel Numbers\",\n        text: \"How many times do you have to reverse add a number to itself before it becomes a palendrome?\",\n        onClick: function onClick(i, e, o) {\n          return _this2.handleClick(i, e, o);\n        },\n        problem: this.lychrelProblem,\n        solution: this.lychrelSolution,\n        problemNumber: \"55\",\n        difficulty: \"5%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }), React.createElement(ProblemCard, {\n        title: \"Quadratic primes\",\n        text: \"Find a quadratic which produces the maximum number of primes for consecutive inputs\",\n        onClick: function onClick(i, e, o) {\n          return _this2.handleClick(i, e, o);\n        },\n        problem: this.quadraticPrimesProblem,\n        solution: this.quadraticPrimesSolution,\n        problemNumber: \"27\",\n        difficulty: \"5%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 315\n        },\n        __self: this\n      }), React.createElement(ProblemCard, {\n        title: \"Pandigital Multiples\",\n        text: \"Find the largest pandigital number formed from a concatenated product of an integer\",\n        onClick: function onClick(i, e, o) {\n          return _this2.handleClick(i, e, o);\n        },\n        problem: this.pandigitalMultiplesProblem,\n        solution: this.pandigitalMultiplesSolution,\n        problemNumber: \"38\",\n        difficulty: \"5%\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 324\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return CardGroup;\n}(Component);\n\nexport default CardGroup;","map":{"version":3,"sources":["C:\\Users\\sebal\\Desktop\\Coding\\reactJS\\project-euler-app\\src\\CardGroup.js"],"names":["React","Component","CardColumns","ProblemCard","Prism","CardGroup","highlightAll","console","log","props","isPandigital","str","includes","state","lychrelNumbers","title","problem","solution","onClick","event","setState","target","value","currentLargest","i","panTest","toString","num","Number","parseInt","split","reverse","join","polynomialX","x","Math","pow","lastAB","a","b","lychrelProblem","lychrelSolution","padding","quadraticPrimesProblem","quadraticPrimesSolution","pandigitalMultiplesProblem","pandigitalMultiplesSolution","e","o","handleClick"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport CardColumns from \"react-bootstrap/CardColumns\";\r\nimport ProblemCard from \"./ProblemCard\";\r\nimport Prism from \"prismjs\";\r\nimport \"./prism.css\";\r\nimport \"./CardGroup.css\";\r\nclass CardGroup extends Component {\r\n  componentDidMount() {\r\n    Prism.highlightAll();\r\n    console.log(\"highlight\");\r\n  }\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      lychrelNumbers: \"\"\r\n    };\r\n  }\r\n  handleClick(title, problem, solution) {\r\n    this.props.onClick(title, problem, solution);\r\n  }\r\n  changeLychrelInput(event) {\r\n    this.setState({ lychrelNumbers: event.target.value });\r\n  }\r\n  isPandigital = str => {\r\n    return (\r\n      str.includes(\"1\") &&\r\n      str.includes(\"2\") &&\r\n      str.includes(\"3\") &&\r\n      str.includes(\"4\") &&\r\n      str.includes(\"5\") &&\r\n      str.includes(\"6\") &&\r\n      str.includes(\"7\") &&\r\n      str.includes(\"8\") &&\r\n      str.includes(\"9\")\r\n    );\r\n  };\r\n  solve() {\r\n    let currentLargest = 0;\r\n    // largest must start with a 9\r\n    // but can't be more than 5 digits (n>1)\r\n    // so i should probably start with a 9\r\n    // but doing that means n must be 2 (maybe?)\r\n    // so start at 9999 and go until 9000\r\n    for (let i = 9999; i > 9000; i--) {\r\n      panTest = i.toString() + (i * 2).toString();\r\n      if (isPandigital(panTest)) {\r\n        console.log(panTest);\r\n      }\r\n    }\r\n  }\r\n  reverse(num) {\r\n    return Number.parseInt(\r\n      num\r\n        .toString()\r\n        .split(\"\")\r\n        .reverse()\r\n        .join(\"\")\r\n    );\r\n  }\r\n  solution() {\r\n    let polynomialX = x => {\r\n      return [-79 - 2 * x, 1601 + 79 * x + Math.pow(x, 2)];\r\n    };\r\n\r\n    let lastAB = [];\r\n\r\n    for (let i = -50; i < 0; i++) {\r\n      var [a, b] = polynomialX(i);\r\n      if (b > 1000 || b < -1000 || a > 1000 || a < -1000) break;\r\n      lastAB = [a, b];\r\n    }\r\n\r\n    return lastAB[0] * lastAB[1];\r\n  }\r\n\r\n  render() {\r\n    this.lychrelProblem = (\r\n      <div>\r\n        <p>\r\n          If we take 47, reverse and add, 47 + 74 = 121, which is palindromic.\r\n          <br />\r\n          <br />\r\n          Not all numbers produce palindromes so quickly. For example,\r\n          <br />\r\n          &emsp;&emsp;&emsp;&emsp;349 + 943 = 1292,\r\n          <br />\r\n          &emsp;&emsp;&emsp;&emsp;1292 + 2921 = 4213\r\n          <br />\r\n          &emsp;&emsp;&emsp;&emsp;4213 + 3124 = 7337\r\n          <br />\r\n          That is, 349 took three iterations to arrive at a palindrome.\r\n          <br />\r\n          <br />\r\n          Although no one has proved it yet, it is thought that some numbers,\r\n          like 196, never produce a palindrome. A number that never forms a\r\n          palindrome through the reverse and add process is called a Lychrel\r\n          number. Due to the theoretical nature of these numbers, and for the\r\n          purpose of this problem, we shall assume that a number is Lychrel\r\n          until proven otherwise. In addition you are given that for every\r\n          number below ten-thousand, it will either (i) become a palindrome in\r\n          less than fifty iterations, or, (ii) no one, with all the computing\r\n          power that exists, has managed so far to map it to a palindrome. In\r\n          fact, 10677 is the first number to be shown to require over fifty\r\n          iterations before producing a palindrome: 4668731596684224866951378664\r\n          (53 iterations, 28-digits).\r\n          <br />\r\n          <br />\r\n          Surprisingly, there are palindromic numbers that are themselves\r\n          Lychrel numbers; the first example is 4994.\r\n          <br />\r\n          <br />\r\n          How many Lychrel numbers are there below ten-thousand?\r\n          <br />\r\n        </p>\r\n      </div>\r\n    );\r\n    this.lychrelSolution = (\r\n      <div style={{ padding: \"0 , 10vw\" }}>\r\n        <p className=\"mainText\">\r\n          We start with two for loops that form the basis of the algorithim. One\r\n          will search every number from 0 to the target, and the other one will\r\n          check every number to see if it is a lychrel\r\n        </p>\r\n        <pre>\r\n          <code className=\"language-javascript\">\r\n            {`\r\n\t\t\tlychrelSolve(target) {\r\n\t\t\t\tfor (let i = 0; i < target; i ++) {\r\n\t\t\t\t\tfor(let n = 0; n < 50; n++) {\r\n\t\t\t\t\t\t//check for Lychrel\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t`}\r\n          </code>\r\n        </pre>\r\n        <br />\r\n        <p>\r\n          We need to add a way to get the palendrome of a number, so we will\r\n          write a function which takes an integer as input and returns the\r\n          palendrom. Javascript has no built in methods to reverse the order of\r\n          characters in an integer, but we can get around this by first turning\r\n          it into a string, then reversing it, then putting it back together\r\n        </p>\r\n        <pre>\r\n          <code className=\"language-javascript\">\r\n            {`\r\n\t\t\treverse(int) {\r\n\t\t\t\treturn Number.parseInt(\r\n\t\t\t\t\tint\r\n\t\t\t\t\t\t.toString()\r\n\t\t\t\t\t\t.split(\"\")\r\n\t\t\t\t\t\t.reverse()\r\n\t\t\t\t\t\t.join(\"\")\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tlychrelSolve(target) {\r\n\t\t\t\tfor (let i = 0; i < target; i ++) {\r\n\t\t\t\t\tfor(let n = 0; n < 50; n++) {\r\n\t\t\t\t\t\t//check for Lychrel\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t`}\r\n          </code>\r\n        </pre>\r\n        <br />\r\n        <p>\r\n          Now all we have to do is add the number to its palendrom and see if it\r\n          becomes a palendrom itself. If it gets to the 50th iteration, as\r\n          stated in the problem we can assume Lychrelness, and add it to our\r\n          count\r\n        </p>\r\n        <pre>\r\n          <code className=\"language-javascript\">\r\n            {`\r\n\t\t\treverse(int) {\r\n\t\t\t\treturn Number.parseInt(\r\n\t\t\t\t\tint\r\n\t\t\t\t\t\t.toString()\r\n\t\t\t\t\t\t.split(\"\")\r\n\t\t\t\t\t\t.reverse()\r\n\t\t\t\t\t\t.join(\"\")\r\n\t\t\t\t);\r\n\t\t\t}\r\n\t\t\tlychrelSolve(target) {\r\n\t\t\t\tlet reverse;\r\n\t\t\t\tlet sum;\r\n\t\t\t\tlet count = 0;\r\n\t\t\t\tfor (let i = 0; i < target; i ++) {\r\n\t\t\t\t\tsum = i;\r\n\t\t\t\t\tfor(let n = 0; n < 50; n++) {\r\n\t\t\t\t\t\tif (sum === reverse(sum)){\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t} else if (n === 49) {\r\n\t\t\t\t\t\t\tcount += 1;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn count;\r\n\t\t\t}\r\n\t\t\t`}\r\n          </code>\r\n        </pre>\r\n      </div>\r\n    );\r\n    this.quadraticPrimesProblem = (\r\n      <div>\r\n        Euler discovered the remarkable quadratic formula:\r\n        <br />\r\n        <br />\r\n        &emsp;&emsp;&emsp;&emsp; <i>n</i>\r\n        <sup>2</sup> + <i>n</i> + 41 <br />\r\n        <br />\r\n        It turns out that the formula will produce 40 primes for the consecutive\r\n        integer values 0 ≤ <i>n</i> ≤ 39. However, when <i>n</i> = 40, 40\r\n        <sup>2</sup>+ 40 + 41 = 40(40 + 1) + 41 is divisible by 41, and\r\n        certainly when <i>n</i>\r\n        = 41, 412 + 41 + 41 is clearly divisible by 41.\r\n        <br /> <br />\r\n        The incredible formula <i>n</i>\r\n        <sup>2</sup> − 79<i>n</i> + 1601 was discovered, which produces 80\r\n        primes for the consecutive values 0 ≤ <i>n</i> ≤ 79. The product of the\r\n        coefficients, −79 and 1601, is −126479. <br />\r\n        <br />\r\n        Considering quadratics of the form:\r\n        <br /> <br />\r\n        &emsp;&emsp;&emsp;&emsp;n<sup>2</sup> + <i>an</i> + <i>b</i>, where |\r\n        <i>a</i>| &lt; 1000 and |<i>b</i>| &ge; 1000\r\n        <br />\r\n        <br />\r\n        &emsp;&emsp;&emsp;&emsp; where |<i>n</i>| is the modulus/absolute value\r\n        of <i>n</i>\r\n        <br />\r\n        &emsp;&emsp;&emsp;&emsp; e.g. |11| = 11 and |−4| = 4 <br />\r\n        <br />\r\n        Find the product of the coefficients, <i>a</i> and <i>b</i>, for the\r\n        quadratic expression that produces the maximum number of primes for\r\n        consecutive values of <i>n</i>, starting with <i>n</i> = 0.\r\n      </div>\r\n    );\r\n    this.quadraticPrimesSolution = (\r\n      <div>\r\n        <pre>\r\n          <code className=\"language-javascript\">\r\n            {`\r\n\t\t\tfunction solution() {\r\n\t\t\t\tlet polynomialX = (x) => {\r\n\t\t\t\t\treturn [-79 - 2 * x, 1601 + 79 * x + Math.pow(x, 2)];\r\n\t\t\t\t};\r\n\r\n\t\t\t\tlet lastAB = [];\r\n\r\n\t\t\t\tfor (let i = -50; i < 0; i++) {\r\n\t\t\t\t\tvar [a, b] = polynomialX(i);\r\n\t\t\t\t\tif (b > 1000 || b < -1000 || a > 1000 || a < -1000) break;\r\n\t\t\t\t\tlastAB = [a, b];\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn lastAB[0] * lastAB[1];\r\n\t\t\t}\r\n\t\t`}\r\n          </code>\r\n        </pre>\r\n      </div>\r\n    );\r\n    this.pandigitalMultiplesProblem = (\r\n      <p>\r\n        Take the number 192 and multiply it by each of 1, 2, and 3:\r\n        <br />\r\n        <br />\r\n        &emsp;&emsp;&emsp;&emsp;192 × 1 = 192\r\n        <br />\r\n        &emsp;&emsp;&emsp;&emsp;192 × 2 = 384\r\n        <br />\r\n        &emsp;&emsp;&emsp;&emsp;192 × 3 = 576\r\n        <br />\r\n        <br />\r\n        By concatenating each product we get the 1 to 9 pandigital, 192384576.\r\n        We will call 192384576 the concatenated product of 192 and (1,2,3)\r\n        <br />\r\n        <br />\r\n        The same can be achieved by starting with 9 and multiplying by 1, 2, 3,\r\n        4, and 5, giving the pandigital, 918273645, which is the concatenated\r\n        product of 9 and (1, 2, 3, 4, 5).\r\n        <br />\r\n        <br />\r\n        What is the largest 1 to 9 pandigital 9-digit number that can be formed\r\n        as the concatenated product of an integer with (1, 2, ... , <i>n</i>)\r\n        where <i>n</i> > 1?\r\n      </p>\r\n    );\r\n\r\n    this.pandigitalMultiplesSolution = (\r\n      <pre>\r\n        <code className=\"language-javascript\">\r\n          {`\r\n\t\t  \r\n\t\t`}\r\n        </code>\r\n      </pre>\r\n    );\r\n    return (\r\n      <div id=\"card-columns\">\r\n        <CardColumns>\r\n          <ProblemCard\r\n            title=\"Lychrel Numbers\"\r\n            text=\"How many times do you have to reverse add a number to itself before it becomes a palendrome?\"\r\n            onClick={(i, e, o) => this.handleClick(i, e, o)}\r\n            problem={this.lychrelProblem}\r\n            solution={this.lychrelSolution}\r\n            problemNumber=\"55\"\r\n            difficulty=\"5%\"\r\n          />\r\n          <ProblemCard\r\n            title=\"Quadratic primes\"\r\n            text=\"Find a quadratic which produces the maximum number of primes for consecutive inputs\"\r\n            onClick={(i, e, o) => this.handleClick(i, e, o)}\r\n            problem={this.quadraticPrimesProblem}\r\n            solution={this.quadraticPrimesSolution}\r\n            problemNumber=\"27\"\r\n            difficulty=\"5%\"\r\n          />\r\n          <ProblemCard\r\n            title=\"Pandigital Multiples\"\r\n            text=\"Find the largest pandigital number formed from a concatenated product of an integer\"\r\n            onClick={(i, e, o) => this.handleClick(i, e, o)}\r\n            problem={this.pandigitalMultiplesProblem}\r\n            solution={this.pandigitalMultiplesSolution}\r\n            problemNumber=\"38\"\r\n            difficulty=\"5%\"\r\n          />\r\n        </CardColumns>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CardGroup;\r\n"]},"metadata":{},"sourceType":"module"}